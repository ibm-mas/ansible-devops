---
- name: Check if SLS config file exists
  ansible.builtin.stat:
    path: "{{ mas_config_dir }}/sls.yml"
  register: sls_file_result

- name: Read SLS config from file
  vars:
    sls_file_cfg: "{{ lookup('file', '{{ mas_config_dir }}/sls.yml') | from_yaml_all }}"
  ansible.builtin.set_fact:
    slscfg:
      secret_name: "{{ sls_file_cfg[0].metadata.name }}"
      registration_key: "{{ sls_file_cfg[0].stringData.registrationKey }}"
      url: "{{ sls_file_cfg[1].spec.config.url }}"
      ca: "{{ sls_file_cfg[1].spec.certificates | map(attribute='crt') | join(',') | replace(',','\n') }}"
  when: sls_file_result.stat.exists

- name: Read SLS config from environment
  ansible.builtin.set_fact:
    slscfg:
      secret_name: "{{ lookup('env', 'AISERVICE_SLS_SECRET_NAME') }}"
      registration_key: "{{ lookup('env', 'AISERVICE_SLS_REGISTRATION_KEY') }}"
      url: "{{ lookup('env', 'AISERVICE_SLS_URL') }}"
      ca: "{{ lookup('env', 'AISERVICE_SLS_CA_CERT') | regex_replace('BEGIN CERTIFICATE', 'BEGIN_CERTIFICATE') | regex_replace('END CERTIFICATE', 'END_CERTIFICATE') | regex_replace('\\s+', '\n') | replace('BEGIN_CERTIFICATE', 'BEGIN CERTIFICATE')| replace('END_CERTIFICATE', 'END CERTIFICATE') }}"
  when: not sls_file_result.stat.exists

- name: "Validate SLS configuration"
  when: slscfg.secret_name | length == 0
  ansible.builtin.fail:
    msg: "slscfg.secret_name must not be empty"

- name: "Validate SLS configuration"
  when: slscfg.registration_key | length == 0
  ansible.builtin.fail:
    msg: "slscfg.registration_key must not be empty"

- name: "Validate SLS configuration"
  when: slscfg.url | length == 0
  ansible.builtin.fail:
    msg: "slscfg.url must not be empty"

- name: "Validate SLS configuration"
  when: slscfg.ca | length == 0
  ansible.builtin.fail:
    msg: "slscfg.ca must not be empty"

- name: "Create secret for SLS registration key"
  kubernetes.core.k8s:
    apply: yes
    template: "templates/sls/sls-tenant-details.yml.j2"
