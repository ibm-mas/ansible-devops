---
# 1. Check for required facts
# -----------------------------------------------------------------------------
- name: "Fail if AppConnect entitlement username has not been provided"
  assert:
    that:
      - appconnect_entitlement_username is defined
      - appconnect_entitlement_username != ""
    fail_msg: "appconnect_entitlement_username property has not been set"

- name: "Fail if AppConnect entitlement key has not been provided"
  assert:
    that:
      - appconnect_entitlement_key is defined
      - appconnect_entitlement_key != ""
    fail_msg: "appconnect_entitlement_key property has not been set"

- name: "Fail if AppConnect license ID has not been provided"
  assert:
    that:
      - appconnect_license_id is defined
      - appconnect_license_id != ""
    fail_msg: "appconnect_license_id property has not been set"

- name: "Fail if AppConnect dashboard instance name has not been provided"
  assert:
    that:
      - appconnect_dashboard_name is defined
      - appconnect_dashboard_name != ""
    fail_msg: "appconnect_dashboard_name property has not been set"

# 2. Load default storage classes (if not provided by the user)
# -----------------------------------------------------------------------------
- include_tasks: tasks/determine-storage-classes.yml

# 3. Check if required operator catalog is installed and ready
# -----------------------------------------------------------------------------
- name: "Lookup ibm-operator-catalog"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    name: ibm-operator-catalog
    namespace: openshift-marketplace
    kind: CatalogSource
  register: catalog_lookup

- name: "Assert that ibm-operator-catalog is available"
  assert:
    that:
      - catalog_lookup.resources is defined
      - catalog_lookup.resources | length == 1
      - catalog_lookup.resources[0].status.connectionState.lastObservedState is defined
      - catalog_lookup.resources[0].status.connectionState.lastObservedState == "READY"
    fail_msg: "The ibm-operator-catalog is not installed, or is not ready to use.  Run the ibm.mas_devops.ibm_catalogs role, or install the CatalogSource manually."

# 3. Provide Debug information
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "AppConnect Namespace ...................... {{ appconnect_namespace }}"
      - "AppConnect Channel ........................ {{ appconnect_channel }}"
      - "AppConnect Dashboard Name ................. {{ appconnect_dashboard_name }}"
      - "AppConnect License ID ..................... {{ appconnect_license_id }}"
      - "AppConnect Storage Class .................. {{ appconnect_storage_class }}"
      - "MAS Instance Id ........................... {{ mas_instance_id }}"
      - "MAS Config Dir ............................ {{ mas_config_dir }}"

# 4. Create AppConnect project
# -----------------------------------------------------------------------------
- name: "Create AppConnect namespace"
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ appconnect_namespace }}"

# 5. Create ibm-entitlement for AppConnect
# -----------------------------------------------------------------------------
- name: "Create ibm-entitlement-key secret in AppConnect namespace"
  vars:
    entitledAuthStr: "{{appconnect_entitlement_username}}:{{appconnect_entitlement_key}}"
    entitledAuth: "{{ entitledAuthStr | b64encode }}"
    content:
      - '{"auths":{"{{ appconnect_registry }}":{"username":"{{ appconnect_entitlement_username }}","password":"{{ appconnect_entitlement_key }}","auth":"{{entitledAuth}}"}'
      - "}"
      - "}"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/dockerconfigjson
      metadata:
        name: ibm-entitlement-key
        namespace: "{{ appconnect_namespace }}"
      stringData:
        .dockerconfigjson: "{{ content | join('') | string }}"

# 6. Deploy AppConnect subscription and Operator Group
# -----------------------------------------------------------------------------
- name: "Create AppConnect operator group"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/operator-group.yml.j2') }}"
    wait: yes
    wait_timeout: 60 #subsequent tasks will fail if the CRD isn't fully created

- name: "Create AppConnect subscription"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/subscription.yml.j2') }}"
    wait: yes
    wait_timeout: 300
    wait_condition:
      type: "CatalogSourcesUnhealthy"
      status: "False"

- name: "Wait until the AppConnect CRD is available"
  include_tasks: "{{ role_path }}/../../common_tasks/wait_for_crd.yml"
  vars:
    crd_name: "dashboards.appconnect.ibm.com"

# 7. Wait until AppConnect Operator is ready
# -----------------------------------------------------------------------------
- name: "Wait for ibm-appconnect-operator to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: ibm-appconnect-operator
    namespace: "{{ appconnect_namespace }}"
    kind: Deployment
  register: appconnect_operator_deployment
  until:
    - appconnect_operator_deployment.resources is defined
    - appconnect_operator_deployment.resources | length > 0
    - appconnect_operator_deployment.resources[0].status is defined
    - appconnect_operator_deployment.resources[0].status.replicas is defined
    - appconnect_operator_deployment.resources[0].status.readyReplicas is defined
    - appconnect_operator_deployment.resources[0].status.readyReplicas == appconnect_operator_deployment.resources[0].status.replicas
  retries: 30 # Approximately 1/2 hour before we give up
  delay: 60 # 1 minute

# 8. Create AppConnect Dashboard
# -----------------------------------------------------------------------------
- name: "Create AppConnect Dashboard"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/dashboard.yml.j2') }}"

# 9. Wait AppConnect Dashboard to be complete
# -----------------------------------------------------------------------------
- name: "Wait for AppConnect Dashboard to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: appconnect.ibm.com/v1beta1
    name: "{{ appconnect_dashboard_name }}"
    namespace: "{{ appconnect_namespace }}"
    kind: Dashboard
  register: appconnect_cr_result
  until:
    - appconnect_cr_result.resources is defined and appconnect_cr_result.resources | length == 1
    - appconnect_cr_result.resources[0].status is defined
    - appconnect_cr_result.resources[0].status.phase is defined
    - appconnect_cr_result.resources[0].status.phase == 'Ready'
  retries: 45 # approx 45 minutes before we give up
  delay: 60 # 1 minute

# 10. Retrieve AppConnect dashboard route
# -----------------------------------------------------------------------------
- name: "Retrieve AppConnect dashboard Route:"
  kubernetes.core.k8s_info:
    api_version: v1
    name: "{{ appconnect_dashboard_name }}-ui"
    namespace: "{{ appconnect_namespace }}"
    kind: Route
  register: appconnect_route
  until:
    - appconnect_route.resources is defined
    - appconnect_route.resources[0].spec.host is defined

- set_fact:
    appconnect_url: "https://{{ appconnect_route.resources[0].spec.host }}"

- name: "AppConnect Dashboard URL"
  debug:
    msg:
      - "AppConnect Dashboard Route ................. {{ appconnect_url }}"

# 11. MAS Config
# -----------------------------------------------------------------------------
- include_tasks: tasks/appconnectcfg.yml
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""
    - appconnect_url is defined
    - appconnect_url != ""

# 12. AppConnect deployment details
# -----------------------------------------------------------------------------
- name: "AppConnect Deployment details"
  debug:
    msg:
      - "AppConnect Namespace ...................... {{ appconnect_namespace }}"
      - "AppConnect Channel ........................ {{ appconnect_channel }}"
      - "AppConnect Endpoint Url ................... {{ appconnect_url }}"
      - "AppConnect Dashboard Name ................. {{ appconnect_dashboard_name }}"
      - "AppConnect License ID ..................... {{ appconnect_license_id }}"
