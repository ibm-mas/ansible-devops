---
# 1. Check required properties
# -----------------------------------------------------------------------------
- name: "cloudflare : Check required properties"
  assert:
    that:
      - cloudflare_zone is defined and cloudflare_zone != ""
      - cloudflare_apitoken is defined and cloudflare_apitoken != ""
      - cloudflare_email is defined and cloudflare_email != ""

- name: "cloudflare : Check subdomain and zone is valid"
  when: cloudflare_subdomain != ""
  vars:
    cloudflare_combined_domain: "{{ cloudflare_subdomain }}.{{ cloudflare_zone }}"
  assert:
    that:
      - cloudflare_combined_domain == mas_domain

- name: "cloudflare : Check zone is valid"
  when: cloudflare_subdomain == ""
  assert:
    that:
      - cloudflare_zone == mas_domain


# 2. Create Secret
# -----------------------------------------------------------------------------
- name: "cloudflare : Install Cloudflare API token secret"
  kubernetes.core.k8s:
    template: templates/cloudflare/secret.yml.j2


# 3. Create ClusterIssuer
# -----------------------------------------------------------------------------
- name: "cloudflare : Install Cloudflare production ClusterIssuer"
  kubernetes.core.k8s:
    template: templates/cloudflare/clusterissuer-prod.yml.j2

- name: "cloudflare : Install Cloudflare staging ClusterIssuer"
  kubernetes.core.k8s:
    template: templates/cloudflare/clusterissuer-staging.yml.j2


# 4. Lookup the OCP ingress for DNS entries
# -----------------------------------------------------------------------------
- name: Lookup the OCP Hostname
  when: ocp_ingress is not defined and ocp_ingress != ''
  block:
    - name: "cloudflare : Get cluster subdomain"
      kubernetes.core.k8s_info:
        api_version: config.openshift.io/v1
        kind: Ingress
        name: cluster
      register: cluster_ingress_lookup

    - name: "cloudflare : Check that we found the cluster ingress"
      assert:
        that:
          - cluster_ingress_lookup.resources is defined
          - cluster_ingress_lookup.resources | length == 1

    - name: "cloudflare : Set ocp_ingress"
      set_fact:
        ocp_ingress: "{{ cluster_ingress_lookup.resources[0].spec.domain }}"


# 5. Setup MAS Domain Name Entries
# -----------------------------------------------------------------------------
- name: "cloudflare : Setup MAS DNS Entries"
  set_fact:
    dns_entries:
      # Core
      - "*"
      - "*.home"
      # Assist
      - "*.assist"
      # HP Utilities
      - "*.hputilities"
      # IoT
      - "*.iot"
      - "*.messaging.iot"
      - "*.edgeconfig.iot"
      - "*.edgeconfigapi.iot"
      # Health
      - "*.health"
      # Manage
      - "*.manage"
      # Monitor
      - "*.api.monitor"
      - "*.monitor"
      # Predict
      - "*.predict"
      # Safety
      - "*.safety"
      # Visual Inspection
      - "*.visualinspection"

- name: "cloudflare : Create MAS DNS record in Cloudflare"
  vars:
    record_name_without_subdomain: "{{ item }}"
    record_name_with_subdomain: "{{ item }}.{{ cloudflare_subdomain }}"
    record_name: "{{ (cloudflare_subdomain == '') | ternary(record_name_without_subdomain, record_name_with_subdomain) }}"
  community.general.cloudflare_dns:
    zone: "{{ cloudflare_zone }}"
    record: "{{ record_name }}"
    type: CNAME
    value: "{{ ocp_ingress }}"
    api_token: "{{ cloudflare_apitoken }}"
  with_items: "{{ dns_entries }}"
