---
# Load variables
- name: Load variables (main)
  include_vars: "vars/main.yml"

# Load variables from odh role
- name: Load variables from odh role (main)
  include_vars: "{{ role_path }}/../odh/defaults/main.yml"

# Create Aibroker Namespace
# -----------------------------------------------------------------------------
- name: "Create Aibroker Namespace"
  kubernetes.core.k8s:
    template: "templates/namespace.yml.j2"

- name: "Delete km-s3-secret secret if it exists"
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Secret
    name: km-s3-secret
    namespace: mas-{{ mas_instance_id }}-aibroker
  ignore_errors: true

- name: "Create km-s3-secret secret"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: km-s3-secret
        namespace: mas-{{ mas_instance_id }}-aibroker
      data:
        AWS_ACCESS_KEY_ID: "{{ mas_aibroker_storage_accesskey | b64encode }}"
        AWS_SECRET_ACCESS_KEY: "{{ mas_aibroker_storage_secretkey | b64encode }}"
        S3_ACCESS_KEY: "{{ mas_aibroker_storage_accesskey | b64encode }}"
        S3_SECRET_KEY: "{{ mas_aibroker_storage_secretkey | b64encode }}"
        S3_HOST: "{{ mas_aibroker_storage_host | b64encode }}"
        S3_PORT: "{{ mas_aibroker_storage_port | b64encode }}" # add only for minio
        S3_REGION: "{{ mas_aibroker_storage_region | b64encode }}"
        S3_SSL: "{{ mas_aibroker_storage_ssl | b64encode }}"

- name: "Check if km-s3-secret secret exists "
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: km-s3-secret
    namespace: mas-{{ mas_instance_id }}-aibroker
  register: kms3_secret_info

# (https://kserve.github.io/website/0.11/modelserving/storage/s3/s3/#create-service-account)
- name: "Update secret with annotation"
  shell: oc annotate secret -n mas-{{ mas_instance_id }}-aibroker km-s3-secret serving.kserve.io/s3-endpoint="{{ mas_aibroker_storage_host }}"
  when:
    - mas_aibroker_storage_provider == "aws"
    - kms3_secret_info.resources[0].metadata.annotations is not defined

- name: "Update secret with annotation"
  shell: oc annotate secret -n mas-{{ mas_instance_id }}-aibroker km-s3-secret serving.kserve.io/s3-endpoint="{{ mas_aibroker_storage_host }}:{{ mas_aibroker_storage_port }}"
  when:
    - mas_aibroker_storage_provider == "minio"
    - kms3_secret_info.resources[0].metadata.annotations is not defined

- name: "Update secret with annotation if SSL is false"
  shell: oc annotate secret -n mas-{{ mas_instance_id }}-aibroker km-s3-secret serving.kserve.io/s3-usehttps="0"
  when:
    - mas_aibroker_storage_ssl == 'false'
    - (kms3_secret_info.resources[0].metadata.annotations['serving.kserve.io/s3-usehttps'] | default('')) != "0"

- name: "Update secret with annotation if SSL is true"
  shell: oc annotate secret -n mas-{{ mas_instance_id }}-aibroker km-s3-secret serving.kserve.io/s3-usehttps="1"
  when:
    - mas_aibroker_storage_ssl == 'true'
    - (kms3_secret_info.resources[0].metadata.annotations['serving.kserve.io/s3-usehttps'] | default('')) != "1"

- name: "Update secret with annotation if region is null"
  shell: oc annotate secret -n mas-{{ mas_instance_id }}-aibroker km-s3-secret serving.kserve.io/s3-region={{ mas_aibroker_storage_region }}
  when:
    - mas_aibroker_storage_provider == "minio"
    - (kms3_secret_info.resources[0].metadata.annotations['serving.kserve.io/s3-region'] | default('')) == ""
  ignore_errors: true

# Load default storage class (if not provided by the user)
# -----------------------------------------------------------------------------
- include_tasks: tasks/determine-storage-classes.yml

# Deploy Kmodels
# -----------------------------------------------------------------------------
- include_tasks: tasks/istio.yml
- include_tasks: tasks/networkpolicies.yml
- include_tasks: tasks/store.yml
- include_tasks: tasks/watcher.yml
- include_tasks: tasks/controller.yml
