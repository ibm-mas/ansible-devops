---
# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if mas_instance_id is not provided"
  assert:
    that: mas_instance_id is defined and mas_instance_id != ""
    fail_msg: "mas_instance_id property is required"

- name: "Fail if mas_config_dir is not provided"
  assert:
    that: mas_config_dir is defined and mas_config_dir != ""
    fail_msg: "mas_config_dir property is required"

- name: "Fail if mongodb_admin_username is not provided"
  assert:
    that: mongodb_admin_username is defined and mongodb_admin_username != ""
    fail_msg: "mongodb_admin_username property is required"

- name: "Fail if mongodb_admin_password is not provided"
  assert:
    that: mongodb_admin_password is defined and mongodb_admin_password != ""
    fail_msg: "mongodb_admin_password property is required"

- name: "Fail if mongodb_hosts is not provided"
  assert:
    that: mongodb_hosts is defined and mongodb_hosts != ""
    fail_msg: "mongodb_hosts property is required"

- name: "Fail if mongodb_ca_pem_local_file is not provided"
  assert:
    that: mongodb_ca_pem_local_file is defined and mongodb_ca_pem_local_file != ""
    fail_msg: "mongodb_ca_pem_local_file property is required"

- name: "Fail if mongodb_namespace is not provided"
  assert:
    that: mongodb_namespace is defined and mongodb_namespace != ""
    fail_msg: "mongodb_namespace property is required"

# 2. Provide debug information
# -----------------------------------------------------------------------------
- name: "Convert mongodb_hosts to dictionary"
  set_fact:
    mongo_hosts_dict: "{{ mongodb_hosts | replace(':', '=')  | string | ibm.mas_devops.string2dict() }}"

- name: "Fail if mongo_hosts_dict is empty"
  assert:
    that: mongo_hosts_dict is defined and mongo_hosts_dict|length>0
    fail_msg: "mongo_hosts_dict is empty"

- name: "Fail if mongodb_authentication_mechanism is not DEFAULT or PLAIN"
  assert:
    that:
      - mongodb_authentication_mechanism is defined
      - mongodb_authentication_mechanism == "DEFAULT" or mongodb_authentication_mechanism == "PLAIN"
    fail_msg: "mongodb_authentication_mechanism may only be defined as DEFAULT or PLAIN"

- name: "Fail if mongodb_authentication_database is not provided"
  assert:
    that: mongodb_authentication_database is defined and mongodb_authentication_database != ""
    fail_msg: "mongodb_authentication_database property is required"

- name: "Fail if mongodb_authentication_mechanism is PLAIN and mongodb_authentication_database is not $external"
  assert:
    that: mongodb_authentication_database == "$external"
    fail_msg: "mongodb_authentication_database must be set to $external when mongodb_authentication_mechanism is set to PLAIN"
  when: mongodb_authentication_mechanism == "PLAIN"

- name: "Debug information"
  debug:
    msg:
      - "MAS Instance ID......................... {{ mas_instance_id }}"
      - "MAS Config Dir.......................... {{ mas_config_dir }}"
      - "Mongo Admin username.................... {{ mongodb_admin_username }}"
      - "Mongo Admin password.................... {{ mongodb_admin_password }}"
      - "Mongo Authentication Mechanism.......... {{ mongodb_authentication_mechanism }}"
      - "Mongo Authentication Database........... {{ mongodb_authentication_database }}"
      - "Mongo hosts ID.......................... {{ mongodb_hosts }}"
      - "Mongo CA PEM............................ {{ mongodb_ca_pem_local_file }}"
      - "Mongo Namespace......................... {{ mongodb_namespace }}"
      - "Mongo host dict......................... {{ mongo_hosts_dict }}"
      - "Mongo mongodb_retry_writes.............. {{ mongodb_retry_writes }}"

# Load mongo-hosts template to dynamically set as many mongo hosts:port as identified
- set_fact:
    mongodb_hosts: "{{ lookup('ansible.builtin.template', 'templates/mongo-hosts.yml.j2') }}"

# 5. Read file information
# -----------------------------------------------------------------------------
- name: Read Mongo Certificate file
  when: mongodb_ca_pem_local_file
  set_fact:
    mongo_tls_crt: "{{ lookup('file', mongodb_ca_pem_local_file) | regex_findall('(-----BEGIN .+?-----(?s).+?-----END .+?-----)', multiline=True, ignorecase=True) }}"
  no_log: true

# Load mongo_certs template to dynamically set as many mongo certificates as identified
- set_fact:
    mongo_certs: "{{ lookup('ansible.builtin.template', 'templates/mongo-certs.yml.j2') }}"
  when: mongo_tls_crt | length > 0

- name: "Create MAS MongoCfg"
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""
  ansible.builtin.template:
    src: suite_mongocfg.yml.j2
    dest: "{{ mas_config_dir }}/mongo-{{ mongodb_namespace }}.yml"
