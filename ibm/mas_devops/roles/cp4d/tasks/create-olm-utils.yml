---
# 2. Create Operator Subscriptions
# -----------------------------------------------------------------------------

# 2.1 Create olm-utils-cm config maps which contains the versions
# for all CPD related services and dependencies.
# This will be used by the CPD operators to automatically set the target versions
# to be installed/upgraded
# -----------------------------------------------------------------------------
- name: "Create olm-utils-cm config map for Cloud Pak for Data release {{ cpd_product_version }}"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/config_maps/olm-utils-cm-{{ cpd_product_version }}.yml.j2') }}"

- name: "Lookup olm-utils-cm config map to map versioning matrix for Cloud Pak for Data release {{ cpd_product_version }}"
  kubernetes.core.k8s_info:
    api_version: v1
    name: "olm-utils-cm"
    kind: ConfigMap
    namespace: "{{ cpd_instance_namespace }}"
  register: cpd_cm_info

- set_fact:
    cpd_components_meta: "{{ cpd_cm_info.resources[0].data.release_components_meta | from_yaml }}"

- name: "Set Cloud Pak for data version details"
  set_fact:
    cpd_channel: "{{ cpd_components_meta.cpd_platform.sub_channel }}"
    zen_cr_version: "{{ cpd_components_meta.zen.cr_version }}"
    cpd_csv_version: "{{ cpd_components_meta.cpd_platform.csv_version }}"
    cpd_ibm_licensing_channel: "{{ cpd_components_meta['ibm-licensing'].sub_channel | default('N/A', true) }}" # this won't be defined in CPD 4.6 and below
    cpd_ibm_licensing_version: "{{ cpd_components_meta['ibm-licensing'].csv_version | default('N/A', true) }}" # this won't be defined in CPD 4.6 and below
    cpfs_channel: "{{ cpd_components_meta.cpfs.sub_channel }}"
    cpfs_version: "{{ cpd_components_meta.cpfs.csv_version }}"

## Debug upgrade or new install
- name: "Lookup existing ZenService CR named '{{ zen_cr_name }}'"
  kubernetes.core.k8s_info:
    api_version: zen.cpd.ibm.com/v1
    name: "{{ zen_cr_name }}"
    namespace: "{{ cpd_instance_namespace }}"
    kind: ZenService
  register: existing_zen_lookup

- name: Set existing zen version if found
  when:
    - existing_zen_lookup.resources is defined
    - existing_zen_lookup.resources | length > 0
    - existing_zen_lookup.resources[0].status.currentVersion is defined
  set_fact:
    existing_zen_cr_version: "{{ existing_zen_lookup.resources[0].status.currentVersion }}"

- name: "Debug existing {{ zen_cr_name }} installed version"
  when: existing_zen_cr_version is defined
  debug:
    var: existing_zen_cr_version

- name: Check if this is a new install or upgrade
  set_fact:
    is_cpd_upgrade: "{{ (existing_zen_cr_version is defined and existing_zen_cr_version is version(zen_cr_version, '<')) | ternary(true, false) | bool }}"

- name: "Debug Cloud Pak for data version details"
  debug:
    msg:
      - "CPD operators namespace ................... {{ cpd_operators_namespace }}"
      - "CPD instance namespace .................... {{ cpd_instance_namespace }}"
      - "CPD release version ....................... {{ cpd_product_version }}"
      - "CPD subscription channel .................. {{ cpd_channel }}"
      - "CPD csv version ........................... {{ cpd_csv_version }}"
      - "Zen action ................................ {{ (is_cpd_upgrade) | ternary('Upgrading from version '+existing_zen_cr_version | default('N/A', true), 'New Install') }}"
      - "Zen/control plane version ................. {{ zen_cr_version }}"
      - "IBM Foundational Services channel ......... {{ cpfs_channel }}"
      - "IBM Foundational Services version ......... {{ cpfs_version }}"
      - "IBM Licensing channel ..................... {{ cpd_ibm_licensing_channel }}"
      - "IBM Licensing version ..................... {{ cpd_ibm_licensing_version }}"
