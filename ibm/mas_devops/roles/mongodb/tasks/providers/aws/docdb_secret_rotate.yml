---
# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if mas_instance_id is not provided"
  when: mas_instance_id is not defined or mas_instance_id == ""
  fail:
    msg: "mas_instance_id property is required"

- name: "Fail if docdb_mongo_instance_name is not provided"
  when: docdb_mongo_instance_name is not defined or docdb_mongo_instance_name == ""
  fail:
    msg: "docdb_mongo_instance_name property is required"

- name: "Fail if docdb_host is not provided"
  when: docdb_host is not defined or docdb_host == ""
  fail:
    msg: "docdb_host property is required"

- name: "Fail if docdb_port is not provided"
  when: docdb_port is not defined or docdb_port == ""
  fail:
    msg: "docdb_port property is required"

- name: "Fail if docdb_instance_username is not provided"
  when: docdb_instance_username is not defined or docdb_instance_username == ""
  fail:
    msg: "docdb_instance_username property is required"

- name: "Debug properties, Provider: {{ mongodb_provider }} Action: {{mongodb_action}}"
  debug:
    msg:
      - "DocumentDB Instance Name ............... {{ docdb_mongo_instance_name }}"
      - "DocumentDB Host ........................ {{ docdb_host }}"
      - "DocumentDB Port ........................ {{ docdb_port }}"
      - "DocumentDB Instance Username ........... {{ docdb_instance_username }}"

# 2. Check for required software
# -----------------------------------------------------------------------------
- name: "Test if mongosh is installed"
  shell: mongosh --version
  register: mongosh_version
  ignore_errors: true

- name: "Fail if mongosh is not installed"
  assert:
    that: ( mongosh_version.rc == 0 )
    fail_msg: "mongosh must be installed (https://www.mongodb.com/docs/mongodb-shell/install/)"

# 3. Get the secret of documentdb from vault
# -----------------------------------------------------------------------------
- name: "Download Amazon DocumentDB Certificate Authority (CA) certificate"
  shell: |
    wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem -O /tmp/rds-combined-ca-bundle.pem

- name: "check if user already exists"
  ignore_errors: true
  shell: |
    mongosh --tls --host {{ docdb_host }}:{{ docdb_port }} --tlsCAFile /tmp/rds-combined-ca-bundle.pem --username {{ docdb_instance_username }}  --password {{ docdb_instance_password_old }}
  register: check_docdb_user

- name: "Fail if docdb user does not exists"
  when: check_docdb_user.rc != 0
  fail:
    msg: "The docdb user does not exists, please check the docdb username."

# 4. Change docdb user password if it exist
# -----------------------------------------------------------------------------
- name: Generate Mongo instance user password
  no_log: true
  set_fact:
    docdb_final_instance_password: "{{ lookup('password', '/dev/null length=20 chars=ascii_lowercase,ascii_uppercase,digits') }}"

- name: create js file from template
  template:
    src: aws/change_password.js.j2
    dest: "/tmp/change_password.js"

- name: Change docdb user password for MAS instance
  shell: |
    mongosh --tls --host {{ docdb_host }}:{{ docdb_port }} --tlsCAFile /tmp/rds-combined-ca-bundle.pem --username {{ docdb_master_username }}  --password {{ docdb_master_password }} /tmp/change_password.js
  register: change_password_output

# 5. Test that the newly created user can connect to docdb
# -----------------------------------------------------------------------------
- name: "Test that the newly created user can connect to docdb"
  shell: |
    mongosh --tls --host {{ docdb_host }}:{{ docdb_port }} --tlsCAFile /tmp/rds-combined-ca-bundle.pem --username {{ docdb_instance_username }}  --password {{ docdb_final_instance_password }}
  register: docdb_connect_result
  retries: 6
  delay: 20 # seconds
  until: docdb_connect_result.rc == 0

# 6. Update new password to Cluster Secret
# -----------------------------------------------------------------------------
- name: update k8s Secret for docdb user credentials
  no_log: false
  ansible.builtin.template:
    src: aws/docdb_instance_user_credentials_secret.yaml.j2
    dest: "{{ mas_config_dir }}/mongodb-{{docdb_mongo_instance_name}}-user-credentials.yml"
  when:
    - docdb_connect_result is defined
    - docdb_connect_result.rc is defined
    - docdb_connect_result.rc == 0

# 7. Restart the pod entitymgr-coreidp
# -----------------------------------------------------------------------------
- name: "Lookup entitymgr-coreidp pods"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    label_selectors:
      - mas.ibm.com/appType=entitymgr
      - control-plane=ibm-mas-coreidp
    namespace: "mas-{{mas_instance_id}}-core"
  register: entity_pod_lookup

- name: "Restart the pod entitymgr-coreidp"
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Pod
    name: "{{ entity_pod_lookup.resources[0].metadata.name }}"
    namespace: "mas-{{mas_instance_id}}-core"
