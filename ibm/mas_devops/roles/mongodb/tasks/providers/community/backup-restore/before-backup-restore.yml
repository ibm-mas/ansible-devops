# Set mongodb backup/restore variables
# -----------------------------------------------------------------------------
- name: "Set fact: mongodb pod variables"
  set_fact:
    mongodb_pod_name: mas-mongo-ce-0
    mongodb_container_name: mongod

- name: "Set fact: exec command in mongodb pod"
  set_fact:
    exec_in_pod_begin: >-
      oc exec {{ mongodb_pod_name }} -c {{ mongodb_container_name }} -n {{ mongodb_namespace }} -- bash -c '
    exec_in_pod_end: "'"

- name: "Set fact: copy file variables"
  set_fact:
    masbr_cf_namespace: "{{ mongodb_namespace }}"
    masbr_cf_pod_name: "{{ mongodb_pod_name }}"
    masbr_cf_container_name: "{{ mongodb_container_name }}"
    masbr_cf_pvc_name: "data-volume-{{ mongodb_pod_name }}"
    masbr_cf_pvc_mount_path: "/data"
    masbr_cf_pvc_sub_path: ""
    masbr_cf_are_pvc_paths: false
    # The mongodb pvc access mode is 'ReadWriteOnce', we need to set affinity to schedule our copying file pod
    # to the same node where mongodb pod located, so that the mongodb pvc can be mounted by multiple pods.
    masbr_cf_affinity: true

- name: "Set fact: temporary folders"
  set_fact:
    mongodb_pod_temp_folder: "{{ masbr_pod_temp_folder }}/{{ masbr_job_name }}"
    mongodb_pvc_temp_folder: "{{ masbr_cf_pvc_mount_path }}/{{ masbr_job_name }}"


# Get mongodb admin password
# -----------------------------------------------------------------------------
- name: "Get mongodb admin password"
  kubernetes.core.k8s_info:
    kind: Secret
    name: mas-mongo-ce-admin-password
    namespace: "{{ mongodb_namespace }}"
  register: _mongodb_password_output
  no_log: true

- name: "Set fact: mongodb admin password"
  set_fact:
    mongodb_password: "{{ _mongodb_password_output.resources[0].data.password | b64decode }}"
  when:
    - _mongodb_password_output is defined
    - _mongodb_password_output.resources[0] is defined
    - _mongodb_password_output.resources[0].data.password is defined
  no_log: true


# Get mongodb ca file location
# -----------------------------------------------------------------------------
- name: "Get mongodb ca file"
  changed_when: false
  shell: >
    {{ exec_in_pod_begin }}
    ls /var/lib/tls/ca/*.pem | head -n 1
    {{ exec_in_pod_end }}
  register: _mongodb_ca_file_output

- name: "Set fact: mongodb ca file"
  set_fact:
    mongodb_ca_file: "{{ _mongodb_ca_file_output.stdout }}"
  when:
    - _mongodb_ca_file_output.rc == 0
    - '"No such file or directory" not in _mongodb_ca_file_output.stdout'


# Get mongodb primary host
# -----------------------------------------------------------------------------
- name: "Get mongodb server information"
  changed_when: false
  shell: >
    {{ exec_in_pod_begin }}
    {{ mongodb_shell }} --quiet --host={{ mongodb_pod_name }}.mas-mongo-ce-svc.{{ mongodb_namespace }}.svc.cluster.local:27017
    --username=admin --password={{ mongodb_password }} --authenticationDatabase=admin
    --tls --tlsCAFile={{ mongodb_ca_file }} admin
    --eval="print(JSON.stringify(db.runCommand({hello:1})))"
    {{ exec_in_pod_end }}
  register: _mongodb_info_output
  no_log: true

- name: "Set fact: mongodb primary host"
  set_fact:
    mongodb_primary_host: "{{ _mongodb_info_output.stdout_lines[-1] | from_json | json_query('primary') }}"


# Output mongodb information
# -----------------------------------------------------------------------------
- name: "Debug: mongodb information"
  debug:
    msg:
      - "MongoDB version ............................ {{ mongodb_version }}"
      - "MongoDB is running ......................... {{ mongodb_running }}"
      - "MongoDB pod name ........................... {{ mongodb_pod_name }}"
      - "MongoDB primary host ....................... {{ mongodb_primary_host }}"
      - "MongoDB ca file ............................ {{ mongodb_ca_file }}"


# Check if an exiting job is running
# -------------------------------------------------------------------------
- name: "Try to find job lock file in pod"
  when: not masbr_allow_multi_jobs
  changed_when: false
  shell: >
    {{ exec_in_pod_begin }}
    [ -f {{ masbr_pod_lock_file }} ] && echo exist; exit 0
    {{ exec_in_pod_end }}
  register: _get_lock_file_output

- name: "Fail if found job lock file in pod"
  when: not masbr_allow_multi_jobs
  assert:
    that: _get_lock_file_output.stdout != "exist"
    fail_msg: "A backup/restore job is running now, please try to run job later!"

- name: "Create job lock file in pod"
  changed_when: true
  shell: >
    {{ exec_in_pod_begin }}
    mkdir -p {{ masbr_pod_lock_file | dirname }};
    touch {{ masbr_pod_lock_file }}
    {{ exec_in_pod_end }}
  register: _create_restore_lock_output


# Check storage usage
# -------------------------------------------------------------------------
- name: "Get storage usage of pod temporary folder"
  changed_when: false
  shell: >
    {{ exec_in_pod_begin }}
    mkdir -p {{ mongodb_pod_temp_folder }};
    df -h {{ mongodb_pod_temp_folder }}
    {{ exec_in_pod_end }}
  register: _df_temp_output

- name: "Debug: storage usage of pod temporary folder"
  debug:
    msg: "{{ _df_temp_output.stdout_lines }}"

- name: "Get storage usage of pvc temporary folder"
  changed_when: false
  shell: >
    {{ exec_in_pod_begin }}
    mkdir -p {{ mongodb_pvc_temp_folder }};
    df -h {{ mongodb_pvc_temp_folder }}
    {{ exec_in_pod_end }}
  register: _df_pvc_output

- name: "Debug: storage usage of pvc temporary folder"
  debug:
    msg: "{{ _df_pvc_output.stdout_lines }}"


# Workarounds
# -------------------------------------------------------------------------
- name: "Set fact: how to copy backup files to specified storage location"
  # When testing in the env using 'ibmc-block-gold' PVC, our copying file pod cannot mount
  # the mongo data PVC even schedule it to the same node where mongo data pod located.
  # Do not create Pod to copy mongo PVC data at this point, we will download the data to local first,
  # then copy it to specified storage location.
  set_fact:
    _mongodb_cf_in_server: false
