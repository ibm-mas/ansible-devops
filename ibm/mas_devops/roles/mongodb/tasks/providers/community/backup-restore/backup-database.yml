---
# Update database backup status: InProgress
# -----------------------------------------------------------------------------
- name: "Update database backup status: InProgress"
  include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/update_job_status.yml"
  vars:
    _job_data_list:
      - seq: "{{ masbr_job_data_seq }}"
        phase: "InProgress"


- name: "Backup mongodb databases"
  block:
    # Create mongodb role and user for backing up databases
    # -------------------------------------------------------------------------
    - name: "Create mongodb role and user for backing up databases"
      include_tasks: "tasks/providers/{{ mongodb_provider }}/backup-restore/create-role-user.yml"


    # Prepare mongodb database backup folder
    # -------------------------------------------------------------------------
    - name: "Set fact: mongodb database backup folder"
      set_fact:
        # We should use mongodb pod ephemeral local storage to save the temporary files,
        # the mongodb data pvc size is not big enough.
        mongodb_backup_folder: "{{ mongodb_pod_temp_folder }}/{{ masbr_job_data_type }}"

    - name: "Set fact: mongodb database backup log"
      set_fact:
        mongodb_backup_log: "{{ mongodb_backup_folder }}/{{ masbr_job_name }}-backup.log"

    - name: "Create mongodb database backup folder"
      changed_when: true
      shell: >
        mkdir -p {{ masbr_local_job_folder }}/{{ masbr_job_data_type }};
        {{ exec_in_pod_begin }}
        mkdir -p {{ mongodb_backup_folder }}
        {{ exec_in_pod_end }}


    # Set database name filter
    # -------------------------------------------------------------------------
    - name: "Set fact: default database name filter"
      when: mas_app_id is not defined or mas_app_id | length == 0
      set_fact:
        # Backup all databases if not specified mas_app_id
        mongodb_db_filter: "^(mas|iot)(_|-){{ mas_instance_id }}(_|-)"

    - name: "Set fact: database name filter for {{ mas_app_id }}"
      when: mas_app_id is defined and mas_app_id | length > 0
      block:
        - name: "Set fact: database name filters for each mas app"
          set_fact:
            mongodb_db_all_filters:
              iot: "iot_{{ mas_instance_id }}_"
              monitor: "iot_{{ mas_instance_id }}_|mas_{{ mas_instance_id }}_monitor"
              visualinspection: "mas-{{ mas_instance_id }}-(visualinspection|edgeman)"
              optimizer: "mas_{{ mas_instance_id }}_optimizer"

        - name: "Set fact: always backup databases for core"
          set_fact:
            mongodb_db_app_filters: ["mas_{{ mas_instance_id }}_(core|catalog|adoptionusage)"]

        - name: "Set fact: append database name filters for ({{ mas_app_id }})"
          set_fact:
            mongodb_db_app_filters: >
              {{ mongodb_db_app_filters + [mongodb_db_all_filters[mas_app_id] | default('')] }}

        - name: "Set fact: database name filters for ({{ mas_app_id }})"
          when: mongodb_db_app_filters is defined and mongodb_db_app_filters | length > 0
          set_fact:
            mongodb_db_filter: "{{ mongodb_db_app_filters | select() | join('|') }}"

    - name: "Debug: database name filter"
      debug:
        msg: "{{ mongodb_db_filter }}"


    # Take a full backup of mongodb databases
    # -------------------------------------------------------------------------
    - name: "Take a full backup of mongodb databases"
      when: masbr_backup_type == "full"
      block:
        # Get all database name belong to specified mas instance
        - name: "Get all database names belong to mas instance {{ mas_instance_id }}"
          changed_when: false
          shell: >-
            {{ exec_in_pod_begin }}
            {{ mongodb_shell }} --quiet --host={{ mongodb_primary_host }}
            --username={{ mongodb_user }} --password={{ mongodb_password }}
            --authenticationDatabase=admin --tls --tlsCAFile={{ mongodb_ca_file }} admin
            --eval="JSON.stringify(db.adminCommand({
              listDatabases: 1,
              nameOnly: true,
              filter: { name: /{{ mongodb_db_filter }}/ }
              }))" | tee -a {{ mongodb_backup_log }}
            {{ exec_in_pod_end }}
          register: _mongodb_db_names_output
          no_log: true

        - name: "Set fact: database names"
          set_fact:
            mongodb_db_names: "{{ _mongodb_db_names_output.stdout | from_json | json_query('databases') }}"

        - name: "Debug: database names"
          debug:
            msg: "{{ mongodb_db_names }}"

        # Get the timestamp of current backup
        - name: "Get the timestamp of current backup"
          changed_when: false
          shell: >
            {{ exec_in_pod_begin }}
            date +%s
            {{ exec_in_pod_end }}
          register: _ts_output

        - name: "Set fact: timestamp of current backup"
          set_fact:
            mongodb_backup_ts: "{{ _ts_output.stdout }}"

        # mongodump
        - name: "Take full backup of mongodb databases"
          changed_when: true
          shell: >
            {{ exec_in_pod_begin }}
            mongodump --host={{ mongodb_primary_host }}
            --username={{ mongodb_user }} --password={{ mongodb_password }}
            --authenticationDatabase=admin --ssl --sslCAFile={{ mongodb_ca_file }}
            --out={{ mongodb_backup_folder }}/mongodump
            --db={{ item.name }}
            |& tee -a {{ mongodb_backup_log }}
            {{ exec_in_pod_end }}
          loop: "{{ mongodb_db_names }}"
          register: _mongodump_output
          no_log: true

        - name: "Debug: mongodump output"
          debug:
            msg: "{{ _mongodump_output | json_query('results[*].stdout_lines') }}"


    # Take an incremental backup of mongodb databases
    # -------------------------------------------------------------------------
    - name: "Take an incremental backup of mongodb databases"
      when: masbr_backup_type == "incr"
      block:
        # Get query file from specified backup job
        - name: "Get query file from specified backup job"
          include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/copy_storage_files_to_pod.yml"
          vars:
            masbr_cf_job_type: "backup"
            masbr_cf_job_name: "{{ masbr_backup_from }}"
            masbr_cf_paths:
              - src_file: "{{ masbr_job_data_type }}/query.json"
                dest_folder: "{{ mongodb_backup_folder }}/from"

        - name: "Get query file content"
          changed_when: false
          shell: >
            {{ exec_in_pod_begin }}
            cat {{ mongodb_backup_folder }}/from/query.json
            {{ exec_in_pod_end }}
          register: _query_file_content_output

        - name: "Debug: query file content"
          debug:
            msg: "{{ _query_file_content_output.stdout }}"

        # Get the timestamp of current backup
        - name: "Get the timestamp of current backup"
          changed_when: false
          shell: >
            {{ exec_in_pod_begin }}
            date +%s
            {{ exec_in_pod_end }}
          register: _ts_output

        - name: "Set fact: timestamp of current backup"
          set_fact:
            mongodb_backup_ts: "{{ _ts_output.stdout }}"

        # mongodump
        - name: "Take an incremental backup of mongodb databases"
          changed_when: true
          shell: >
            {{ exec_in_pod_begin }}
            mongodump --host={{ mongodb_primary_host }}
            --username={{ mongodb_user }} --password={{ mongodb_password }}
            --authenticationDatabase=admin --ssl --sslCAFile={{ mongodb_ca_file }}
            --db=local --collection=oplog.rs --queryFile={{ mongodb_backup_folder }}/from/query.json
            --out={{ mongodb_backup_folder }}/mongodump
            |& tee -a {{ mongodb_backup_log }}
            {{ exec_in_pod_end }}
          register: _mongodump_output
          no_log: true

        - name: "Debug: mongodump output"
          debug:
            msg: "{{ _mongodump_output.stdout_lines }}"


    # Create tar.gz archives of database backup files
    # -------------------------------------------------------------------------
    - name: "Create tar.gz archives of database backup files"
      changed_when: true
      shell: >
        {{ exec_in_pod_begin }}
        tar -czf {{ mongodb_backup_folder }}/{{ masbr_job_name }}.tar.gz
        -C {{ mongodb_backup_folder }}/mongodump . &&
        du -h {{ mongodb_backup_folder }}/*
        {{ exec_in_pod_end }}
      register: _du_files_output

    - name: "Debug: size of backup files"
      debug:
        msg: "{{ _du_files_output.stdout_lines }}"


    # Copy backup files to specified storage location
    # -------------------------------------------------------------------------
    - name: "Copy backup files from pod to specified storage location"
      when: _mongodb_cf_in_server
      include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/copy_pod_files_to_storage.yml"
      vars:
        masbr_cf_job_type: "backup"
        masbr_cf_job_name: "{{ masbr_job_name }}"
        masbr_cf_paths:
          - src_file: "{{ mongodb_backup_folder }}/{{ masbr_job_name }}.tar.gz"
            dest_folder: "{{ masbr_job_data_type }}"

    - name: "Download and copy backup files to specified storage location"
      when: not _mongodb_cf_in_server
      block:
        - name: "Download backup files from pod to local"
          changed_when: true
          shell: >
            oc cp --retries=50 -c {{ mongodb_container_name }}
            {{ mongodb_namespace }}/{{ mongodb_pod_name }}:{{ mongodb_backup_folder }}/{{ masbr_job_name }}.tar.gz
            {{ masbr_local_job_folder }}/{{ masbr_job_data_type }}/{{ masbr_job_name }}.tar.gz

        - name: "Copy backup files from local to specified storage location"
          include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/copy_local_files_to_storage.yml"
          vars:
            masbr_cf_job_type: "backup"
            masbr_cf_job_name: "{{ masbr_job_name }}"
            masbr_cf_paths:
              - src_file: "{{ masbr_job_data_type }}/{{ masbr_job_name }}.tar.gz"
                dest_folder: "{{ masbr_job_data_type }}"


    # Create query file used by the subsequent incremental backups
    # -------------------------------------------------------------------------
    - name: "Create query file used by the subsequent incremental backups"
      copy:
        dest: "{{ masbr_local_job_folder }}/{{ masbr_job_data_type }}/query.json"
        content: "{{ mongodb_query | from_yaml | to_json }}"
        mode: preserve
      vars:
        mongodb_query: "{{ lookup('template', 'templates/community/mongo-query.yml.j2') }}"

    - name: "Get query file content"
      changed_when: false
      shell: >
        cat {{ masbr_local_job_folder }}/{{ masbr_job_data_type }}/query.json
      register: _cat_query_file_output

    - name: "Debug: query file content"
      debug:
        msg: "{{ _cat_query_file_output.stdout }}"

    - name: "Copy query file to specified storage location"
      include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/copy_local_files_to_storage.yml"
      vars:
        masbr_cf_job_type: "backup"
        masbr_cf_job_name: "{{ masbr_job_name }}"
        masbr_cf_paths:
          - src_file: "{{ masbr_job_data_type }}/query.json"
            dest_folder: "{{ masbr_job_data_type }}"


    # Update database backup status: Completed
    # -------------------------------------------------------------------------
    - name: "Update database backup status: Completed"
      include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/update_job_status.yml"
      vars:
        _job_data_list:
          - seq: "{{ masbr_job_data_seq }}"
            phase: "Completed"

  rescue:
    # Update database backup status: Failed
    # -------------------------------------------------------------------------
    - name: "Update database backup status: Failed"
      include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/update_job_status.yml"
      vars:
        _job_data_list:
          - seq: "{{ masbr_job_data_seq }}"
            phase: "Failed"

  always:
    # Copy mongodb backup log file to specified storage location
    # -------------------------------------------------------------------------
    - name: "Create a tar.gz archive of mongodb backup log"
      changed_when: true
      shell: >
        {{ exec_in_pod_begin }}
        tar -czf {{ mongodb_backup_folder }}/{{ masbr_job_name }}-backup-log.tar.gz
        -C {{ mongodb_backup_folder }} {{ masbr_job_name }}-backup.log
        {{ exec_in_pod_end }}

    - name: "Copy mongodb backup log file from pod to specified storage location"
      when: _mongodb_cf_in_server
      include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/copy_pod_files_to_storage.yml"
      vars:
        masbr_cf_job_type: "backup"
        masbr_cf_job_name: "{{ masbr_job_name_final }}"
        masbr_cf_paths:
          - src_file: "{{ mongodb_backup_folder }}/{{ masbr_job_name }}-backup-log.tar.gz"
            dest_folder: "log"

    - name: "Download and copy backup log file to specified storage location"
      when: not _mongodb_cf_in_server
      block:
        - name: "Download backup log file from pod to local"
          changed_when: true
          shell: >
            oc cp --retries=50 -c {{ mongodb_container_name }}
            {{ mongodb_namespace }}/{{ mongodb_pod_name }}:{{ mongodb_backup_folder }}/{{ masbr_job_name }}-backup-log.tar.gz
            {{ masbr_local_job_folder }}/log/{{ masbr_job_name }}-backup-log.tar.gz

        - name: "Copy backup log file from local to specified storage location"
          include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/copy_local_files_to_storage.yml"
          vars:
            masbr_cf_job_type: "backup"
            masbr_cf_job_name: "{{ masbr_job_name_final }}"
            masbr_cf_paths:
              - src_file: "log/{{ masbr_job_name }}-backup-log.tar.gz"
                dest_folder: "log"
