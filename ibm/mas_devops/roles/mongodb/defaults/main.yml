---
# Currently supported providers are aws,ibm,community
mongodb_provider: "{{ lookup('env','MONGODB_PROVIDER') | default('community','True')}}"

# When these are defined we will generate a MAS MongoCfg template
mas_instance_id: "{{ lookup('env', 'MAS_INSTANCE_ID') }}"
mas_config_dir: "{{ lookup('env', 'MAS_CONFIG_DIR') }}"
mongodb_action: "{{ lookup('env', 'MONGODB_ACTION') | default('install', true) }}"

# Backup mongodb databases for specified MAS application. Backup all mongodb databases if not specify this value.
mas_app_id: "{{ lookup('env', 'MAS_APP_ID') }}"

# mongodb community vars
# -----------------------------------------------------------------------------

# Where to install the operator and create the mongo instance
mongodb_namespace: "{{ lookup('env', 'MONGODB_NAMESPACE') | default('mongoce', True) }}"

# Decide if you want to keep your current spec for Mongo or overwrite it
mongodb_override_spec: "{{ lookup('env','MONGODB_OVERRIDE_SPEC') | default (false, true) | bool }}"

# Storage configuration
mongodb_storage_class: "{{ lookup('env', 'MONGODB_STORAGE_CLASS') }}"
mongodb_storage_capacity_data: "{{ lookup('env', 'MONGODB_STORAGE_CAPACITY_DATA') | default('20Gi', True) }}"
mongodb_storage_capacity_logs: "{{ lookup('env', 'MONGODB_STORAGE_CAPACITY_LOGS') | default('20Gi', True) }}"

# CPU and memory requests/limits configuration on the mongodb container
mongodb_cpu_limits: "{{ lookup('env', 'MONGODB_CPU_LIMITS') | default('1', true) }}"
mongodb_mem_limits: "{{ lookup('env', 'MONGODB_MEM_LIMITS') | default('1Gi', true) }}"
mongodb_cpu_requests: "{{ lookup('env', 'MONGODB_CPU_REQUESTS') | default('500m', true) }}"
mongodb_mem_requests: "{{ lookup('env', 'MONGODB_MEM_REQUESTS') | default('1Gi', true) }}"

# MongoDB Replicas
mongodb_replicas: "{{ lookup('env', 'MONGODB_REPLICAS') | default(3, True) }}"

# Indicates if this is controlled upgrade of both the mongo operator and mongo instance
controlled_upgrade: false

# Indicates if grafana role has been run
supports_grafanav4: false

# Version of Mongo installed when the IBM Catalog does is not installed or the corresponding CaseBundle does not exist
mongo_extras_version: "{{ lookup('env', 'MONGODB_VERSION') }}"

# It appears that between v5 and v6 the shell changed from "mongo" to "mongosh"
# This broke lots of actions supported by this role.  We are defaulting to "mongosh", but this can be overridden if needed
mongodb_shell: "mongosh"

# aws documentdb vars
# -----------------------------------------------------------------------------
aws_access_key_id: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
aws_secret_access_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
aws_region: "{{ lookup('env', 'AWS_REGION') | default('us-east-2', True) }}"

# aws vpc id where subnets and other resources will be created
vpc_id: "{{ lookup('env','VPC_ID') }}"

docdb_cluster_name: "{{ lookup('env', 'DOCDB_CLUSTER_NAME') }}"
docdb_subnet_group_name: "docdb-{{ docdb_cluster_name }}"
docdb_security_group_name: "docdb-{{ docdb_cluster_name }}"
docdb_admin_credentials_secret_name: "{{ docdb_cluster_name }}-admin-credentials"

docdb_instance_identifier_prefix: "{{ lookup('env', 'DOCDB_INSTANCE_IDENTIFIER_PREFIX')}}"
docdb_instance_number: "{{ lookup('env', 'DOCDB_INSTANCE_NUMBER') | default(3, True) }}"
docdb_instance_class: "{{ lookup('env', 'DOCDB_INSTANCE_CLASS') | default('db.t3.medium', True) }}"
docdb_master_username: "{{ lookup('env', 'DOCDB_MASTER_USERNAME') | default('docdbadmin', True) }}" # refere other dbs admin usernames <mas-instance-id>-admin
docdb_engine_version: "{{ lookup('env', 'DOCDB_ENGINE_VERSION') | default('5.0.0', True) }}"

# cidr for subnets in 3 different availabilty zones
docdb_cidr_az1: "{{ lookup('env', 'DOCDB_CIDR_AZ1') }}"
docdb_cidr_az2: "{{ lookup('env', 'DOCDB_CIDR_AZ2') }}"
docdb_cidr_az3: "{{ lookup('env', 'DOCDB_CIDR_AZ3') }}"

# add ipv4 cidr of vpc so that all applications inside that vpc can talk to documentdb
docdb_ingress_cidr: "{{ lookup('env', 'DOCDB_INGRESS_CIDR') }}"
docdb_egress_cidr: "{{ lookup('env', 'DOCDB_EGRESS_CIDR') }}"

# ibmcloud mongodb vars
# -----------------------------------------------------------------------------
ibm_mongo_admin_credentials_secret_name: "{{ ibm_mongo_name }}-admin-credentials"
mongo_service_credentials_secret_name: "{{ ibm_mongo_name }}-service-credentials"

#vars for mongo backup restore
ibm_mongo_backup_id: "{{ lookup('env', 'IBM_MONGO_BACKUP_ID') | default('', True) }}"
restored_mongodb_service_name: "{{ lookup('env', 'RESTORED_MONGO_SERVICE_NAME') }}"
is_restore: "{{ lookup('env', 'IS_RESTORE') | default(false, True) }}"

ibmcloud_resourcegroup: "{{ lookup('env','IBMCLOUD_RESOURCEGROUP') | default('Default', True) }}"
ibm_mongo_resourcegroup: "{{ lookup('env', 'IBM_MONGO_RESOURCEGROUP') | default(ibmcloud_resourcegroup, true) }}"

ibmcloud_region: "{{ lookup('env', 'IBMCLOUD_REGION') | default('us-east', True) }}"
ibm_mongo_region: "{{ lookup('env', 'IBM_MONGO_REGION') | default(ibmcloud_region, True) }}"

ibmcloud_apikey: "{{ lookup('env', 'IBMCLOUD_APIKEY') }}"

ibm_mongo_plan: "{{ lookup('env', 'IBM_MONGO_PLAN') | default('standard', True) }}"
ibm_mongo_location: "{{ ibmcloud_region }}"
ibm_mongo_service: "databases-for-mongodb"
ibm_mongo_service_endpoints: "{{ lookup('env', 'IBM_MONGO_SERVICE_ENDPOINTS') | default('public', True) }}"
ibm_mongo_version: "{{ lookup('env', 'IBM_MONGO_VERSION') | default('4.4', True) }}"

ibm_mongo_memory: "{{ lookup('env', 'IBM_MONGO_MEMORY') | default('3840',True) }}"
ibm_mongo_disk: "{{ lookup('env', 'IBM_MONGO_DISK') | default('30720',True) }}"
ibm_mongo_cpu: "{{ lookup('env', 'IBM_MONGO_CPU') | default(0,True) }}"
ibm_mongo_name_default: "mongo-{{ mas_instance_id }}"
ibm_mongo_name: "{{ lookup('env', 'IBM_MONGO_NAME') | default(ibm_mongo_name_default, True) }}"
ibm_mongo_admin_password: "{{ lookup('env', 'IBM_MONGO_ADMIN_PASSWORD') }}"

# aws docdb_secret_rotate vars
# -----------------------------------------------------------------------------
docdb_mongo_instance_name: "{{ lookup('env', 'DOCDB_MONGO_INSTANCE_NAME') }}"
docdb_host: "{{ lookup('env', 'DOCDB_HOST') }}"
docdb_port: "{{ lookup('env', 'DOCDB_PORT') }}"
docdb_instance_username: "{{ lookup('env', 'DOCDB_INSTANCE_USERNAME') }}"
docdb_instance_password_old: "{{ lookup('env', 'DOCDB_PASSWORD_OLD') }}"
docdb_master_password: "{{ lookup('env', 'DOCDB_MASTER_PASSWORD') }}"
# Custom Labels
custom_labels: "{{ lookup('env', 'CUSTOM_LABELS') | default(None, true) | string | ibm.mas_devops.string2dict() }}"

# Mongo upgrade flags
# If identified that there's an existing Mongo that might lead to a v5 or v6 upgrade
# the following flags must be set to confirm the upgrades otherwise the role will fail and not proceed with the upgrade.
mongodb_v5_upgrade: "{{ lookup('env', 'MONGODB_V5_UPGRADE') | default(false, true) | bool }}"
mongodb_v6_upgrade: "{{ lookup('env', 'MONGODB_V6_UPGRADE') | default(false, true) | bool }}"
mongodb_v7_upgrade: "{{ lookup('env', 'MONGODB_V7_UPGRADE') | default(false, true) | bool }}"
mongodb_v8_upgrade: "{{ lookup('env', 'MONGODB_V8_UPGRADE') | default(false, true) | bool }}"

# This matrix will define and validate the mongodb upgrade compatibility mapping version.
# Therefore this must be updated whenever a new mongodb version is supported.
# Only allow Mongo upgrades to be next compatible minor (or patch) version.
# Example:
# If `existing_mongo_version: 4.4.21` then the `target_mongodb_version` must be `5.0.21` or `5.0.23`.
# Otherwise the code will validate there is an incompatibility in the version to be upgraded and it will fail prior starting the upgrade process.
mongo_compatible_target_version:
  "4.2.6":
    - "4.4.21"
  "4.2.23":
    - "4.4.21"
  "4.4.21":
    - "5.0.21"
    - "5.0.23"
  "5.0.21":
    - "5.0.23"
    - "6.0.10"
    - "6.0.12"
  "5.0.23":
    - "6.0.10"
    - "6.0.12"
  "6.0.10":
    - "6.0.12"
    - "7.0.12"
    - "7.0.22"
    - "7.0.23"
  "6.0.12":
    - "6.0.12"
    - "7.0.12"
    - "7.0.22"
    - "7.0.23"
  "7.0.12":
    - "7.0.12"
    - "7.0.22"
    - "7.0.23"
    - "8.0.13"
  "7.0.22":
    - "7.0.22"
    - "7.0.23"
    - "8.0.13"
  "7.0.23":
    - "7.0.23"
    - "8.0.13"
  "8.0.13":
    - "8.0.13"
# destroy-data vars
# -----------------------------------------------------------------------------
config: "{{ lookup('env', 'CONFIG') }}"
certificates: "{{ lookup('env', 'CERTIFICATES') }}"
mongo_username: "{{ lookup('env', 'MONGO_USERNAME') }}"
mongo_password: "{{ lookup('env', 'MONGO_PASSWORD') }}"
