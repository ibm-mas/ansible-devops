---
# 0. Delete CatalogSources first (prevent operators from respawning)
- name: Delete CP4D/Zen/Common CatalogSources
  shell: |
    for src in cpd-platform ibm-zen-operator-catalog opencloud-operators; do
      if oc get catalogsource -n ibm-cpd-operators $src &>/dev/null; then
        oc delete catalogsource $src -n ibm-cpd-operators --ignore-not-found --force --grace-period=0 || true
      fi
    done
  register: catalogs_deleted
  ignore_errors: true

- debug:
    msg: "Deleted CatalogSources: {{ catalogs_deleted.stdout_lines }}"

# 1. Delete OLM objects (Subscriptions, CSVs, InstallPlans)
- name: Delete Subscriptions, CSVs, InstallPlans
  shell: |
    oc delete subscription,clusterserviceversion,installplan -n ibm-cpd-operators --all --ignore-not-found --force --grace-period=0 || true
  register: olm_deleted
  ignore_errors: true

- debug:
    msg: "Deleted OLM objects: {{ olm_deleted.stdout_lines }}"

# 2. Force delete operator workloads (deployments, pods, jobs, replicasets)
- name: Force delete operator workloads
  shell: |
    for ns in ibm-cpd ibm-cpd-operators; do
      oc delete deployment,replicaset,job,pod -n $ns --all --ignore-not-found --force --grace-period=0 || true
    done
  register: workloads_deleted
  ignore_errors: true

- debug:
    msg: "Deleted workloads: {{ workloads_deleted.stdout_lines }}"

# 3. Remove finalizers from OperandRequests and OperandConfigs
- name: Remove finalizers from OperandRequests
  shell: |
    for or in $(oc get operandrequest -n ibm-cpd-operators -o name 2>/dev/null || true); do
      oc patch $or -n ibm-cpd-operators --type=json -p='[{"op":"remove","path":"/metadata/finalizers"}]' || true
    done
  register: or_finalizers_removed
  ignore_errors: true

- debug:
    msg: "OperandRequests finalizers removed: {{ or_finalizers_removed.stdout_lines }}"

- name: Remove finalizers from OperandConfigs
  shell: |
    for ocfg in $(oc get operandconfig -n ibm-cpd-operators -o name 2>/dev/null || true); do
      oc patch $ocfg -n ibm-cpd-operators --type=json -p='[{"op":"remove","path":"/metadata/finalizers"}]' || true
    done
  register: oc_finalizers_removed
  ignore_errors: true

- debug:
    msg: "OperandConfigs finalizers removed: {{ oc_finalizers_removed.stdout_lines }}"

# 4. Remove finalizers from OperandRegistry and OperandBindInfo
- name: Remove finalizers from OperandRegistry and OperandBindInfo
  shell: |
    for cr_type in operandregistry operandbindinfo; do
      for cr in $(oc get $cr_type -n ibm-cpd-operators -o name 2>/dev/null || true); do
        oc patch $cr -n ibm-cpd-operators --type=json -p='[{"op":"remove","path":"/metadata/finalizers"}]' || true
        oc delete $cr -n ibm-cpd-operators --ignore-not-found --force --grace-period=0 || true
      done
    done
  register: operand_registry_bindinfo
  ignore_errors: true

- debug:
    msg: "OperandRegistry and OperandBindInfo cleaned: {{ operand_registry_bindinfo.stdout_lines }}"

# 5. Delete OperandRequests and OperandConfigs
- name: Delete OperandRequests and OperandConfigs
  shell: |
    oc delete operandrequest -n ibm-cpd-operators --all --ignore-not-found --force --grace-period=0 || true
    oc delete operandconfig -n ibm-cpd-operators --all --ignore-not-found --force --grace-period=0 || true
  register: operands_deleted
  ignore_errors: true

- debug:
    msg: "Deleted OperandRequests/Configs: {{ operands_deleted.stdout_lines }}"

# 6. Wait for pods to fully terminate
- name: Wait for pods in ibm-cpd-operators to terminate
  shell: |
    for i in $(seq 1 30); do
      pod_count=$(oc get pods -n ibm-cpd-operators --no-headers 2>/dev/null | wc -l)
      if [ "$pod_count" -eq 0 ]; then
        exit 0
      fi
      sleep 10
    done
    exit 1
  register: wait_pods
  ignore_errors: true

- debug:
    msg: "Remaining pods after waiting: {{ wait_pods.stdout_lines }}"

# 7. Delete CRDs
- name: Delete CP4D/Zen/Common CRDs
  shell: |
    for crd in $(oc get crd -o name | grep -E 'zen|cpd|operand|common-service' || true); do
      oc delete $crd --ignore-not-found --force --grace-period=0 || true
    done
  register: crds_deleted
  ignore_errors: true

- debug:
    msg: "Deleted CRDs: {{ crds_deleted.stdout_lines }}"
