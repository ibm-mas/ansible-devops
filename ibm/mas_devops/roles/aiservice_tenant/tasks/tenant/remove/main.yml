---
# Tasks to remove tenant resources
- name: Check if models exist before deleting kmodels
  shell: oc get isvc,ig -n {{ tenantNamespace }} -o name
  register: result

- name: Check if any models exist
  fail:
    msg: "Please remove all models before deleting kmodels"
  when: result.rc == 0 and result.stdout != ''

- name: Lookup AIServiceTenant CR
  kubernetes.core.k8s_info:
    api_version: aiservice.ibm.com/v1
    kind: AIServiceTenant
    name: "{{ aiservice_tenant_name }}"
    namespace: "{{ tenantNamespace }}"
  register: lookup_result

- name: Debug lookup_result.resources
  debug:
    var: lookup_result.resources


- name: Set facts from AIServiceTenant
  ansible.builtin.set_fact:
    aiservice_instance_id: "{{ lookup_result.resources[0].metadata.labels['app.kubernetes.io/instance'] | default('') }}"
    aiservice_tenant_id: "{{ lookup_result.resources[0].spec.settings.tenant.tenantId | default('') }}"
    aiservice_tenant_name: "{{ lookup_result.resources[0].metadata.name }}"
  when: lookup_result.resources | length > 0

- name: Debug facts set from AIServiceTenant
  debug:
    msg:
      - "aiservice_instance_id: {{ aiservice_instance_id }}"
      - "aiservice_tenant_id: {{ aiservice_tenant_id }}"
      - "aiservice_tenant_name: {{ aiservice_tenant_name }}"

- name: Define resource kinds to delete
  set_fact:
    resource_kinds:
      - ConfigMap
      - Secret
      - Route
      - DeploymentConfig
      - VolumeSnapshot
      - Deployment
      - Pod
      - PersistentVolumeClaim
      - StatefulSet
      - Service

- name: Define API version map for resource kinds
  set_fact:
    api_version_map:
      ConfigMap: v1
      Secret: v1
      Route: route.openshift.io/v1
      DeploymentConfig: apps.openshift.io/v1
      VolumeSnapshot: snapshot.storage.k8s.io/v1beta1
      Deployment: apps/v1
      Pod: v1
      PersistentVolumeClaim: v1
      StatefulSet: apps/v1
      Service: v1

- name: Gather all resources by kind in namespace
  loop: "{{ resource_kinds }}"
  loop_control:
    loop_var: resource_kind
  kubernetes.core.k8s_info:
    api_version: "{{ api_version_map[resource_kind] }}"
    kind: "{{ resource_kind }}"
    namespace: "{{ tenantNamespace }}"
  register: resource_list
  ignore_errors: yes

- name: Combine all gathered resources into one list
  set_fact:
    items_to_delete: >-
      {{
        resource_list.results
        | map(attribute='resources')
        | list
        | flatten
      }}

- name: Debug gathered resources to delete
  debug:
    msg: "Found {{ items_to_delete | length }} resources to delete in namespace '{{ tenantNamespace }}'"

- name: Delete all gathered resources
  kubernetes.core.k8s:
    api_version: "{{ item.apiVersion | default(item.api_version | default('v1')) }}"
    kind: "{{ item.kind }}"
    name: "{{ item.metadata.name }}"
    namespace: "{{ tenantNamespace }}"
    state: absent
  loop: "{{ items_to_delete }}"
  ignore_errors: yes
  no_log: true


- name: Delete tenant namespace
  kubernetes.core.k8s:
    state: absent
    kind: Namespace
    name: "{{ aiservice_tenant_name }}"
    wait: true
    wait_timeout: "{{ wait_timeout | default(60) }}"
  ignore_errors: true
  register: delete_result

- name: Tenant cleanup complete
  debug:
    msg: "All resources in namespace '{{ aiservice_tenant_name }}' have been deleted."


- name: Delete Tenant CR
  kubernetes.core.k8s:
    state: absent
    api_version: aiservice.ibm.com/v1
    kind: AIServiceTenant
    name: "{{ tenantNamespace }}"
    namespace: "{{ aiservice_namespace }}"
    wait: true
    wait_timeout: 60

- name: Tenant status
  debug:
    msg: "Tenant was deleted"


