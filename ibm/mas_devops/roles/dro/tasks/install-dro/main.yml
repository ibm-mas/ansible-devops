---
# 1. Check for MAS ImageContentSourcePolicy
# -----------------------------------------------------------------------------
- name: "Determine whether this is an airgap environment"
  include_tasks: "{{ role_path }}/../../common_tasks/detect_airgap.yml"

# 2. Display DRO deployment details
# -----------------------------------------------------------------------------
- name: "DRO Deployment details"
  debug:
    msg:
      - "DRO Namespace ...................... {{ dro_namespace }}"
      - "IBM entitlement key................. Can get from https://myibm.ibm.com/products-services/containerlibrary"
      - "MAS Instance ID .................... {{ mas_instance_id | default('<undefined>', True) }}"
      - "MAS Config Directory ............... {{ mas_config_dir | default('<undefined>', True) }}"
      - "DRO Contact First Name ............. {{ dro_contact.first_name | default('<undefined>', True) }}"
      - "DRO Contact Last Name .............. {{ dro_contact.last_name | default('<undefined>', True) }}"
      - "DRO Contact e-mail ................. {{ dro_contact.email | default('<undefined>', True) }}"

# 3. Check "{{ dro_namespace }}" operator exists
# ----------------------------------------------------------------------------
- name: Check if operator group is present in "{{ dro_namespace }}" already
  kubernetes.core.k8s_info:
    namespace: "{{ dro_namespace }}"
    kind: OperatorGroup
  register: og_info

- name: "Create OperatorGroup in {{ dro_namespace }} namespace if not exist"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/operatorgroup.yml.j2') }}"

# 4. Create a PVC using the Chosen Storage Class
# ----------------------------------------------------------------------------
- name: "Debug User Provided DRO Storage Class"
  debug:
    msg:
      - "User Provided DRO Storage Class Name ..................... {{ dro_storage_class }}"
  when: dro_storage_class is defined and (dro_storage_class | length > 0)

- name: Determine Storage Class
  include_tasks: tasks/install-dro/determine-storage-classes.yml
  when: dro_storage_class is not defined or dro_storage_class == ""

- name: Create DRO PVC
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/dro-pvc.yml.j2') }}"

# 5. Create Marketplace Pull Secret
# ----------------------------------------------------------------------------
- name: Get marketplace secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "redhat-marketplace-pull-secret"
    namespace: "{{ dro_namespace }}"
  register: rm_sec

- name: get IBM Entitlement Key while Migration
  when: dro_migration is defined and dro_migration | lower == "true"
  block:
    - name: Lookup ibm entitlement secret in ibm-common-services
      k8s_info:
        api_version: v1
        kind: Secret
        name: ibm-entitlement-key
        namespace: ibm-common-services
      register: ent_sec

    - name: Lookup ibm entitlement secret in core namespace
      when: ent_sec.resources is defined and ent_sec.resources | length == 0
      block:
        - name: get core namespace
          k8s_info:
            api_version: config.mas.ibm.com/v1
            kind: BasCfg
          register: udscfgs

        - name: set instance namespace
          set_fact:
            ent_ns: "{{ udscfgs.resources[0].metadata.namespace }}"

        - name: Lookup ibm entitlement secret in core namesapce
          k8s_info:
            api_version: v1
            kind: Secret
            name: ibm-entitlement
            namespace: "{{ ent_ns }}"
          register: ent_sec

    - name: set fact
      when: ent_sec.resources is defined and ent_sec.resources | length != 0
      set_fact:
        ibment: "{{ent_sec.resources[0].data['.dockerconfigjson'] |b64decode |from_json}}"

    - name: set ibm-entitlement-key for cp.icr.io/cp
      set_fact:
        ibm_entitlement_key: "{{ibment.auths['cp.icr.io/cp'].password}}"
      when: ibment is defined and ibment.auths['cp.icr.io/cp'] is defined

    - name: set ibm-entitlement-key for artifactory
      set_fact:
        ibm_entitlement_key: "{{ibment.auths['icr.io/masdev'].password}}"
      when: ibment is defined and ibment.auths['icr.io/masdev'] is defined

- name: Check IBM Entitlement Key
  ansible.builtin.assert:
    that:
      - ibm_entitlement_key is defined
      - ibm_entitlement_key | length != 0
    fail_msg: "Provide IBM Entitlement Key, Access https://myibm.ibm.com/products-services/containerlibrary using your IBMId to access your entitlement key"
  when: (rm_sec.resources is defined) and (rm_sec.resources | length == 0)

# 6. Load PodTemplates configuration
# -----------------------------------------------------------------------------
- name: "Load podTemplates configuration"
  include_tasks: "{{ role_path }}/../../common_tasks/pod_templates/main.yml"
  vars:
    config_files: ["ibm-mas-bascfg.yml"]

# 7. Install ibm-metrics-operator
# -----------------------------------------------------------------------------
- name: Get ibm-metrics-operator Subscription
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: "ibm-metrics-operator"
    namespace: "{{ dro_namespace }}"
  register: imo_subscription

- name: Get ibm-metrics-operator package manifest
  kubernetes.core.k8s_info:
    api_version: packages.operators.coreos.com/v1
    kind: PackageManifest
    name: "ibm-metrics-operator"
    namespace: openshift-marketplace
  register: imo_manifest
  when: (imo_subscription.resources is defined) and (imo_subscription.resources | length == 0)

- name: Assert that PackageManifest exists
  ansible.builtin.assert:
    that:
      - imo_manifest is defined
      - imo_manifest.resources is defined
      - imo_manifest.resources | length == 1
    fail_msg: "PackageManifest not found: ibm-metrics-operator"
  when: (imo_subscription.resources is defined) and (imo_subscription.resources | length == 0)

- name: Set the subscription information ibm-metrics-operator
  set_fact:
    imo_source: "{{ imo_manifest.resources[0].status.catalogSource }}"
    imo_source_namespace: "{{ imo_manifest.resources[0].status.catalogSourceNamespace }}"
    imo_default_channel: "{{ imo_manifest.resources[0].status.defaultChannel }}"
  when: (imo_subscription.resources is defined) and (imo_subscription.resources | length == 0)

- name: Create Subscription ibm_metrics_operator
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/subscription/imo_subscription.yml') }}"
    wait: yes
    wait_timeout: 60
  when: (imo_subscription.resources is defined) and (imo_subscription.resources | length == 0)

# 8. Install ibm-data-reporter-operator
# -----------------------------------------------------------------------------
- name: Get ibm-data-operator Subscription
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: "ibm-data-reporter-operator"
    namespace: "{{ dro_namespace }}"
  register: dro_subscription

- name: Get ibm-data-reporter-operator package manifest
  kubernetes.core.k8s_info:
    api_version: packages.operators.coreos.com/v1
    kind: PackageManifest
    name: "ibm-data-reporter-operator"
    namespace: openshift-marketplace
  register: dro_manifest

- name: Assert that PackageManifest exists
  ansible.builtin.assert:
    that:
      - dro_manifest is defined
      - dro_manifest.resources is defined
      - dro_manifest.resources | length == 1
    fail_msg: "PackageManifest not found: ibm-data-reporter-operator"

- name: Set the subscription information ibm-data-reporter-operator
  set_fact:
    dro_source: "{{ dro_manifest.resources[0].status.catalogSource }}"
    dro_source_namespace: "{{ dro_manifest.resources[0].status.catalogSourceNamespace }}"
    dro_default_channel: "{{ dro_manifest.resources[0].status.defaultChannel }}"

- name: "Create Subscription ibm-data-reporter-operator"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/subscription/dro_subscription.yml') }}"
    wait: yes
    wait_timeout: 60
  when: (dro_subscription.resources is defined) and (dro_subscription.resources | length == 0)

# 9. Wait until the marketplaceconfigs CRD is available
# -----------------------------------------------------------------------------
- name: "Wait until the marketplaceconfigs CRD is available"
  include_tasks: "{{ role_path }}/../../common_tasks/wait_for_crd.yml"
  vars:
    crd_name: marketplaceconfigs.marketplace.redhat.com

# 10. Apply MarketplaceConfig CR
# -----------------------------------------------------------------------------
- name: Create MarketplaceConfig CR
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/MarketplaceConfig-cr.yml.j2') }}"

# 11. Create DRO Pull Secret
# -----------------------------------------------------------------------------
- name: "Create Secret redhat-marketplace-pull-secret"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/rhm-pull-secret.yml.j2') }}"
  when: (rm_sec.resources is defined) and (rm_sec.resources | length == 0)

# 12. Apply required RBACs
- name: "Create ClusterRoleBindings for metric-state"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/role_binding.yml.j2') }}"

# 13. Check deployment status
# -----------------------------------------------------------------------------
- name: "Wait for the rhm-data-service to be ready"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: rhm-data-service
    namespace: "{{ dro_namespace }}"
    kind: StatefulSet
  register: rds_sts
  until:
    - rds_sts.resources is defined and rds_sts.resources | length == 1
    - rds_sts.resources[0].status is defined
    - rds_sts.resources[0].status.readyReplicas is defined
    - rds_sts.resources[0].status.readyReplicas == 3
  retries: 30
  delay: 20 # seconds

- name: "Wait for the ibm-data-reporter-operator-controller-manager to be ready"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: ibm-data-reporter-operator-controller-manager
    namespace: "{{ dro_namespace }}"
    kind: Deployment
  register: dro_deploy
  until:
    - dro_deploy.resources is defined and dro_deploy.resources | length == 1
    - dro_deploy.resources[0].status is defined
    - dro_deploy.resources[0].status.readyReplicas is defined
    - dro_deploy.resources[0].status.readyReplicas == 1
  retries: 30
  delay: 20 # seconds
