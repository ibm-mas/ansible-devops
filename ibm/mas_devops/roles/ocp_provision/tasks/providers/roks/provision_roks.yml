---
# 1. Failure conditions
# -----------------------------------------------------------------------------
- name: "roks : Fail if ibmcloud_apikey is not provided"
  assert:
    that: ibmcloud_apikey is defined and ibmcloud_apikey != ""
    fail_msg: "ibmcloud_apikey property is required"

# 2. Sanitize ocp_version input
# -----------------------------------------------------------------------------
- name: "roks : Sanitize ocp_version input"
  set_fact:
    ocp_version: "{{ ocp_version ~ '_openshift' if '_openshift' not in ocp_version else ocp_version }}"

# 3. Debug Info
# -----------------------------------------------------------------------------
- name: "roks : Debug information"
  debug:
    msg:
      - "Cluster name ................. {{ cluster_name }}"
      - "OCP version .................. {{ ocp_version }}"
      - "IBM Cloud API key ............ ********************"
      - "IBM Cloud Resource Group ..... {{ ibmcloud_resourcegroup | default('<undefined>') }}"
      # ROKS specific
      - "ROKS zone .................... {{ roks_zone }}"
      - "ROKS flavor .................. {{ roks_flavor }}"
      - "ROKS workers ................. {{ roks_workers }}"
      - "ROKS flags ................... {{ roks_flags }}"


# 4. Login
# -----------------------------------------------------------------------------
- name: "roks : Login to IBM Cloud"
  shell: |
    ibmcloud login -a "{{ ibmcloud_endpoint }}" --apikey "{{ ibmcloud_apikey }}" -q --no-region


# 5. Optionally, switch to a specified resource group (creating it if necessary)
# -----------------------------------------------------------------------------
- name: "roks : Check resource group exists"
  when: ibmcloud_resourcegroup is defined
  shell: |
    ibmcloud resource group "{{ ibmcloud_resourcegroup }}"
  register: rg_lookup
  failed_when: "rg_lookup.rc > 1"

- name: "roks : Debug current resource group status"
  when:
    - ibmcloud_resourcegroup is defined
    - rg_lookup.rc == 0
  debug:
    msg: "Resource group {{ ibmcloud_resourcegroup }} already exists, skipping resource group creation"

- name: "roks : Create resource group if it does not exist"
  when:
    - ibmcloud_resourcegroup is defined
    - rg_lookup.rc == 1
  shell: |
    ibmcloud resource group-create {{ ibmcloud_resourcegroup }}
  register: rg_creation
  failed_when: "rg_creation.rc > 1"

- name: "roks : Switch to chosen resource group"
  when: ibmcloud_resourcegroup is defined
  shell: |
    ibmcloud target -g {{ ibmcloud_resourcegroup }}
  register: rg_target
  failed_when: "rg_target.rc > 1"


# 6. Check if cluster already exists
# -----------------------------------------------------------------------------
- name: "roks : Check if cluster already exists"
  shell: |
    ibmcloud oc cluster get -c {{ cluster_name }} --output json
  register: cluster_lookup
  failed_when: "cluster_lookup.rc > 1"

- name: "roks : Debug current cluster status"
  when: cluster_lookup.rc == 0
  debug:
    msg: "{{ cluster_name }} already exists, skipping cluster creation"


# 7. Setup vlans
# -----------------------------------------------------------------------------
- name: "roks : Lookup VLANs automatically (ibmcloud ks vlan ls --zone {{ roks_zone }} --output json)"
  when: cluster_lookup.rc == 1 or ocp_provision_gpu|bool == true
  shell: |
    ibmcloud ks vlan ls --zone {{ roks_zone }} --output json
  register: ibmcloud_zone_vlans

- name: "roks : Parse VLAN list"
  set_fact:
    vlan_list: "{{ ibmcloud_zone_vlans.stdout | from_json }}"

# If private exists but public missing â†’ create public VLAN in same router
- name: Create public VLAN if missing
  when:
    - vlan_list | selectattr('type', 'equalto', 'private') | list | length > 0
    - vlan_list | selectattr('type', 'equalto', 'public') | list | length == 0
  block:

    - name: Set public VLAN name
      set_fact:
        public_vlan_name: "{{ cluster_name }}-pub-{{ 99999 | random }}"

    - name: Create public VLAN in same router
      command: >
        ibmcloud sl vlan create
        -n {{ public_vlan_name }}
        -d {{ roks_zone }}
        -t public
        --output json
        --force
      register: public_vlan_create

    - name: Wait for newly created public VLAN to appear
      command: ibmcloud ks vlan ls --zone {{ roks_zone }} --output json
      register: vlan_list_check
      retries: 20
      delay: 15
      until: >
        (vlan_list_check.stdout | from_json
          | selectattr('type', 'equalto', 'public')
          | selectattr('properties.name', 'equalto', public_vlan_name)
          | list | length) > 0

- name: Refresh VLAN list after creating public VLAN
  shell: ibmcloud ks vlan ls --zone {{ roks_zone }} --output json
  register: vlan_list_refreshed

- name: Set vlan_list fact from refreshed list
  set_fact:
    vlan_list: "{{ vlan_list_refreshed.stdout | from_json }}"

# If VLANs exist, set public and private VLANs
- name: "roks : Configure Private and Public Vlans"
  when:
    - cluster_lookup.rc == 1 or ocp_provision_gpu|bool == true
    - vlan_list | selectattr('type', 'equalto', 'public') | list | length > 0
    - vlan_list | selectattr('type', 'equalto', 'private') | list | length > 0
  set_fact:
    public: "{{ vlan_list | ibm.mas_devops.public_vlan }}"
    private: "{{ vlan_list | ibm.mas_devops.private_vlan }}"

- name: Print VLAN values
  debug:
    msg:
      - "Public VLAN: {{ public | default('NOT SET') }}"
      - "Private VLAN: {{ private | default('NOT SET') }}"

# 8. Create cluster
# -----------------------------------------------------------------------------
- name: "roks : Create IBM Cloud ROKS cluster"
  when: cluster_lookup.rc == 1
  shell: >
    ibmcloud oc cluster create classic \
      --hardware shared \
      --entitlement cloud_pak \
      --name {{ cluster_name }} \
      --version {{ ocp_version }} \
      --zone {{ roks_zone }} \
      --flavor {{ roks_flavor }} \
      --workers {{ roks_workers }} \
      --private-vlan {{ private is defined | ternary(private, omit) }} \
      --public-vlan {{ public is defined | ternary(public, omit) }} \
      {{ roks_flags }}


# 9. Add a GPU worker node if ocp_provision_gpu is true
# -----------------------------------------------------------------------------
- name: "roks : Debug Information for GPU worker"
  when:
    - ocp_provision_gpu is defined
    - ocp_provision_gpu|bool == true
  debug:
    msg:
      - "GPU woker pool name ................. {{ gpu_workerpool_name }}"
      - "GPU workers ......................... {{ gpu_workers }}"
      - "Expected GPU flavor ................. mg4c.32x384.2xp100"

- name: "roks : Check if GPU worker pool already exists"
  when:
    - ocp_provision_gpu is defined
    - ocp_provision_gpu|bool == true
  shell: ibmcloud oc worker-pool get --cluster {{ cluster_name }} --worker-pool {{ gpu_workerpool_name }} --output json
  register: workerpool_lookup
  failed_when: "workerpool_lookup.rc > 1"

- name: "roks : Debug worker pool status"
  when:
    - ocp_provision_gpu is defined
    - ocp_provision_gpu|bool  == true
    - workerpool_lookup.rc == 0
  debug:
    msg: "A gpu worker pool already exists, skipping creation of gpu worker pool"

- name: "roks : Add a GPU worker pool"
  when:
    - ocp_provision_gpu is defined
    - ocp_provision_gpu|bool  == true
    - workerpool_lookup.rc == 1
  shell: >
    ibmcloud oc worker-pool create classic \
      --hardware dedicated \
      --cluster {{ cluster_name }} \
      --name {{ gpu_workerpool_name }} \
      --flavor mg4c.32x384.2xp100 \
      --size-per-zone {{ gpu_workers }} \
      --entitlement cloud_pak

- name: "roks : Get GPU worker pool zone information"
  when:
    - ocp_provision_gpu is defined
    - ocp_provision_gpu|bool  == true
    - workerpool_lookup.rc == 0
  set_fact:
    zone_added: "{{(workerpool_lookup.stdout | from_json).zones}}"

- name: "roks : Add GPU worker pool to zone"
  when:
    - ocp_provision_gpu is defined
    - ocp_provision_gpu|bool  == true
    - zone_added is undefined or zone_added == []
  shell: |
    ibmcloud oc zone add classic \
      --zone {{ roks_zone }} \
      --cluster {{ cluster_name }} \
      --worker-pool {{ gpu_workerpool_name }} \
      --private-vlan {{ private is defined | ternary(private, omit) }} \
      --public-vlan {{ public is defined | ternary(public, omit) }}

- name: "roks : status of GPU worker node provisioning"
  when:
    - ocp_provision_gpu is defined
    - ocp_provision_gpu|bool  == true
    - zone_added is undefined or zone_added == []
  debug:
    msg: "GPU worker node(s) will continue to provision and can take at least 4 hours to be fully deployed"


# 10. Watch cluster provisioning progress
# -----------------------------------------------------------------------------
- name: "roks : Wait until the Roks cluster is deployed"
  shell: |
    ibmcloud oc cluster get --cluster {{ cluster_name }} --output json
  register: roks_cluster_completion
  until:
    - roks_cluster_completion.rc == 0
    - (roks_cluster_completion.stdout | from_json).state == 'normal'
  retries: 30
  delay: 120  # 2 minutes

- name: "roks: Debug final cluster state"
  debug:
    msg: "{{ roks_cluster_completion.stdout | from_json }}"
