---
# 1. Check SLS version and define version aware vars
# -----------------------------------------------------------------------------
- name: Check SLS version
  ansible.builtin.include_tasks: "{{ role_path }}/../../common_tasks/get_version_from_channel.yml"
  vars:
    op_pm_name: "ibm-sls"
    op_channel_name: "{{ sls_channel }}"

- name: Set after_sls_380
  ansible.builtin.set_fact:
    after_sls_380: "{{ op_version is version('3.8.0', '>=') }}"

- name: Set before_sls_380
  ansible.builtin.set_fact:
    before_sls_380: "{{ op_version is version('3.8.0', '<') }}"

- name: Set after_sls_370
  ansible.builtin.set_fact:
    after_sls_370: "{{ op_version is version('3.7.0', '>=') }}"

- name: Set before_sls_370
  ansible.builtin.set_fact:
    before_sls_370: "{{ op_version is version('3.7.0', '<') }}"


# 2. Check for missing properties that do not have defaults
# -----------------------------------------------------------------------------
- name: "Fail if sls_entitlement_key has not been provided"
  ansible.builtin.assert:
    that: sls_entitlement_key is defined and sls_entitlement_key != ""
    fail_msg: "sls_entitlement_key property has not been set"
  when: before_sls_380

- name: "Fail if no MongoDb config is provided"
  ansible.builtin.assert:
    that: sls_mongodb is defined or (sls_mongodb_cfg_file is defined and sls_mongodb_cfg_file != "")
    fail_msg: "Either sls_mongodb_cfg_file or mongodb properties must be set"

- name: "Fail if missing any mongodb information"
  ansible.builtin.assert:
    that:
      - sls_mongodb.hosts is defined
      - sls_mongodb.certificates is defined
      - sls_mongodb.username is defined
      - sls_mongodb.password is defined
    fail_msg: "Review provided MongoDb details, it is missing required elements"
  when: sls_mongodb is defined


# 3. Determine Bootstrap
# -----------------------------------------------------------------------------
# This is needed because if only partial variables are defined
# then the entire bootstrap array in defaults is overridden
- name: Set bootstrap variables
  ansible.builtin.set_fact:
    bootstrap:
      license_file: "{{ bootstrap.license_file | default('') }}"
      license_id: "{{ bootstrap.license_id | default('') }}"
      registration_key: "{{ bootstrap.registration_key | default('') }}"
  when: bootstrap.license_file is defined or
        bootstrap.license_id is defined or
        bootstrap.registration_key is defined

- name: "Fail if bootstrap.license_id is not set when bootstrap.license_file is set"
  ansible.builtin.assert:
    that:
      - bootstrap.license_id is defined
      - bootstrap.license_id != ""
    fail_msg: "In SLS 3.6.0 or below, when using SLS_LICENSE_FILE you must set SLS_LICENSE_ID."
  when:
    - before_sls_370
    - bootstrap.license_file is defined
    - bootstrap.license_file != ""

- name: "Fail if bootstrap.license_file is not set when bootstrap.license_id or bootstrap.registration_key is set"
  ansible.builtin.assert:
    that:
      - bootstrap.license_file is defined
      - bootstrap.license_file != ""
    fail_msg: "In SLS 3.6.0 or below, when using SLS_LICENSE_ID or SLS_REGISTRATION_KEY you must set SLS_LICENSE_FILE."
  when:
    - before_sls_370
    - (bootstrap.license_id is defined and bootstrap.license_id != "") or
      (bootstrap.registration_key is defined and bootstrap.registration_key != "")

- name: "Fail if entitlement_file is set when bootstrap.license_file and bootstrap.license_id are not set"
  ansible.builtin.assert:
    that:
      - entitlement_file is defined
      - entitlement_file == ""
    fail_msg: "SLS_ENTITLEMENT_FILE is only supported in SLS 3.7.0 and higher. Use SLS_LICENSE_FILE and SLS_LICENSE_ID instead or upgrade SLS."
  when:
    - before_sls_370
    - (bootstrap.license_file is defined and bootstrap.license_file == "") or
      (bootstrap.license_id is defined and bootstrap.license_id == "")

- name: "Fail if bootstrap.license_id is not set when bootstrap.license_file is set"
  ansible.builtin.assert:
    that:
      - bootstrap.license_id is defined
      - bootstrap.license_id != ""
    fail_msg: "When using SLS_LICENSE_FILE you must set SLS_LICENSE_ID. Otherwise, in SLS 3.7.0 and higher use only SLS_ENTITLEMENT_FILE instead."
  when:
    - after_sls_370
    - bootstrap.license_file is defined
    - bootstrap.license_file != ""
    - entitlement_file is defined
    - entitlement_file == ""

- name: Print deprecation warning
  ansible.builtin.debug:
    msg: "WARNING: SLS_LICENSE_FILE and SLS_LICENSE_ID have been deprecated since SLS 3.7.0. Use only SLS_ENTITLEMENT_FILE instead."
  when:
    - after_sls_370
    - (bootstrap.license_file is defined and bootstrap.license_file != "") or
      (bootstrap.license_id is defined and bootstrap.license_id != "")

- name: Clear bootstrap_mode
  ansible.builtin.set_fact:
    bootstrap_mode: false
    bootstrap_old_way: false

# All possible combinations for post and pre SLS 3.7.0 to initiate old bootstrap process
- name: Set bootstrap_mode
  ansible.builtin.set_fact:
    bootstrap_mode: true
  when: (after_sls_370  and (bootstrap.registration_key is defined and bootstrap.registration_key != "")) or
        (after_sls_370  and (bootstrap.license_file is defined and bootstrap.license_file != "") and (entitlement_file is defined and entitlement_file == "")) or
        (before_sls_370 and ((bootstrap.license_file is defined and bootstrap.license_file != "") or (bootstrap.registration_key is defined and bootstrap.registration_key != "")))

# When user has provided all bootstrap vars and entitlement_file and we are on SLS 3.7.0 or higher
# we only want to add registration_key to bootstrap secret and use entitlement_file to upload the license file
- name: Set bootstrap_old_way
  ansible.builtin.set_fact:
    bootstrap_old_way: true
  when: before_sls_370 or (after_sls_370 and entitlement_file == "")


# 4. Provide general debug information
# -----------------------------------------------------------------------------
- name: "Debug SLS information"
  ansible.builtin.debug:
    msg:
      - "Catalog Source ......................... {{ sls_catalog_source }}"
      - "SLS channel ............................ {{ sls_channel }}"
      - "SLS version ............................ {{ op_version }}"
      - "SLS namespace .......................... {{ sls_namespace }}"
      - "SLS ICR cp content ..................... {{ sls_icr_cp }}"
      - "SLS ICR cpopen content ................. {{ sls_icr_cpopen }}"
      - "SLS Instance Name ...................... {{ sls_instance_name }}"
      - "SLS MongoCfg file ...................... {{ sls_mongodb_cfg_file | default('<undefined>', True) }}"
      - "SLS Bootstrap .......................... {{ bootstrap_mode }}"
      - "SLS Bootstrap license file ............. {{ bootstrap.license_file | default('<undefined>', True) }}"
      - "SLS Bootstrap license id ............... {{ bootstrap.license_id | default('<undefined>', True) }}"
      - "SLS Bootstrap registrationKey .......... {{ bootstrap.registration_key | default('<undefined>', True) }}"
      - "SLS entitlement file ................... {{ entitlement_file | default('<undefined>', True) }}"
      - "SLS Mongo Retry Writes default value ... {{ sls_mongo_retrywrites }}"


# 5. Load PodTemplates configuration
# -----------------------------------------------------------------------------
- name: "Load podTemplates configuration"
  include_tasks: "{{ role_path }}/../../common_tasks/pod_templates/main.yml"
  vars:
    config_files: ["ibm-sls-licenseservice.yml"]


# 6. Install Operator & create entitlement
# -----------------------------------------------------------------------------
- name: "Create IBM Entitlement Key"
  when: before_sls_380 or (artifactory_username is defined and artifactory_username != "")
  ibm.mas_devops.update_ibm_entitlement:
    namespace: "{{ sls_namespace }}"
    icr_username: "{{ sls_entitlement_username }}"
    icr_password: "{{ sls_entitlement_key }}"
    artifactory_username: "{{ artifactory_username }}"
    artifactory_password: "{{ artifactory_token }}"
    kyverno_labels: true

- name: "Create ibm-sls Subscription"
  ibm.mas_devops.apply_subscription:
    namespace: "{{ sls_namespace }}"
    package_name: "ibm-sls"
    package_channel: "{{ sls_channel }}"
    catalog_source: "{{ sls_catalog_source }}"
  register: subscription


# 7. Wait until the LicenseService CRD is available
# -----------------------------------------------------------------------------
- name: "Wait until the LicenseService CRD is available"
  include_tasks: "{{ role_path }}/../../common_tasks/wait_for_crd.yml"
  vars:
    crd_name: licenseservices.sls.ibm.com


# 8. Create Mongo Secret
# -----------------------------------------------------------------------------
- name: Read MongoDb config file
  ansible.builtin.set_fact:
    mongocfg: "{{ lookup('file', sls_mongodb_cfg_file) | from_yaml_all }}"
  when: sls_mongodb_cfg_file is defined

- name: "Fail if mongocfg missing required mongo connection details"
  ansible.builtin.assert:
    that:
      - mongocfg is defined and mongocfg[0] is defined and mongocfg[1] is defined
      - mongocfg[1].spec.config.hosts is defined and mongocfg[1].spec.config.hosts != ''
      - ((mongocfg[0].stringData is defined and mongocfg[0].stringData.username is defined and mongocfg[0].stringData.username != '' and
        mongocfg[0].stringData.password is defined and mongocfg[0].stringData.password != '') or
        (mongocfg[0].data is defined and mongocfg[0].data.username is defined and mongocfg[0].data.username != '' and
        mongocfg[0].data.password is defined and mongocfg[0].data.password != ''))
    fail_msg: "Review provided SLS MongoCfg file, it is missing required mongo connection details"
  when: sls_mongodb_cfg_file is defined

- name: Override MongoDb facts bases on mongocfg
  ansible.builtin.set_fact:
    mongodb:
      username: "{{ mongocfg[0].stringData.username }}"
      password: "{{ mongocfg[0].stringData.password }}"
      hosts: "{{ mongocfg[1].spec.config.hosts }}"
      certificates: "{{ lookup('template', 'templates/mongo-certificates.yml.j2') }}"
  when: mongocfg is defined and mongocfg[0] is defined and mongocfg[0].stringData is defined

- name: Override MongoDb facts bases on mongocfg
  ansible.builtin.set_fact:
    mongodb:
      username: "{{ mongocfg[0].data.username | b64decode }}"
      password: "{{ mongocfg[0].data.password | b64decode}}"
      hosts: "{{ mongocfg[1].spec.config.hosts }}"
      certificates: "{{ lookup('template', 'templates/mongo-certificates.yml.j2') }}"
  no_log: true
  when: mongocfg is defined and mongocfg[0] is defined and mongocfg[0].data is defined

- name: Set sls_mongo_retrywrites to mongocfg[1].spec.config.retryWrites if it exists
  ansible.builtin.set_fact:
    sls_mongo_retrywrites: "{{ mongocfg[1].spec.config.retryWrites }}"
  when: mongocfg is defined and mongocfg | length > 1 and mongocfg[1].spec.config.retryWrites is defined

- name: "Debug Retry Writes setting"
  ansible.builtin.debug:
    msg:
      - "SLS Mongo Retry Writes set to .......... {{ sls_mongo_retrywrites }}"

- name: Create the Mongo Secret for SLS
  kubernetes.core.k8s:
    state: present
    namespace: "{{ sls_namespace }}"
    template: templates/mongo-secret.yml.j2


# 9. Bootstrap the license service
# -----------------------------------------------------------------------------
- name: Initialize Bootstrap
  when: bootstrap_mode
  block:
    - name: Load License File
      ansible.builtin.set_fact:
        license_file_loaded: "{{ lookup('file', bootstrap.license_file) }}"
      when:
        - bootstrap.license_file is defined
        - bootstrap.license_file != ""
        - bootstrap_old_way

    - name: Assert that license file is not empty
      ansible.builtin.assert:
        that: license_file_loaded != ""
        fail_msg: "The license file loaded is empty!"
      when: license_file_loaded is defined

    - name: Create SLS Bootstrap secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ sls_instance_name }}-bootstrap"
            namespace: "{{ sls_namespace }}"
          stringData:
            licensingId: "{{ (bootstrap_old_way and bootstrap.license_id is defined and bootstrap.license_id != '') | ternary(bootstrap.license_id, omit) }}"
            licensingKey: "{{ license_file_loaded is defined | ternary(license_file_loaded, omit) }}"
            registrationKey: "{{ (bootstrap.registration_key is defined and bootstrap.registration_key != '') | ternary(bootstrap.registration_key, omit) }}"

# For SLS 3.7.0 and higher
- name: Create SLS Entitlement Secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "ibm-sls-{{ sls_instance_name }}-entitlement"
        namespace: "{{ sls_namespace }}"
      stringData:
        entitlement: "{{ lookup('file', entitlement_file) }}"
  when:
    - after_sls_370
    - entitlement_file != ""


# 10. Create the license service CR
# -----------------------------------------------------------------------------
- name: Create the sls.ibm.com/v1.LicenseService
  kubernetes.core.k8s:
    state: present
    namespace: "{{ sls_namespace }}"
    template: templates/licenseservice.yml.j2
  register: sls_cr_result


# 11. Wait for it to hit Ready
# -----------------------------------------------------------------------------
- name: Verify LicenseService CR
  ansible.builtin.include_tasks: "tasks/install/sls-verify.yml"
