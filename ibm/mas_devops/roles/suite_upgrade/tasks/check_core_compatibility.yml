---
# 1. Check that the subscription meets the required state
# -----------------------------------------------------------------------------
- name: "core : Get subscription for ibm-mas"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    namespace: "{{ mas_namespace }}"
    label_selectors:
      - "operators.coreos.com/ibm-mas.{{ mas_namespace }}"
  register: suite_sub_info

- name: "core : Debug existing Subscription"
  debug:
    var: suite_sub_info

- name: "core : Check that the subscription exists"
  assert:
    that:
      - suite_sub_info.resources is defined
      - suite_sub_info.resources | length == 1
      - suite_sub_info.resources[0].spec is defined
      - suite_sub_info.resources[0].spec.channel is defined
    fail_msg: "Unable to find MAS subscription in namespace {{ mas_namespace }}"

- name: "core : Debug when we are already on the desired channel"
  when: suite_sub_info.resources[0].spec.channel == mas_channel
  debug:
    msg: "No action required, subscription is already on the {{ suite_sub_info.resources[0].spec.channel }} channel"

- name: "core : Check that upgrade is supported from current channel"
  when:
    - not ( skip_compatibility_check is defined and skip_compatibility_check )
    - suite_sub_info.resources[0].spec.channel != mas_channel
  assert:
    that: suite_sub_info.resources[0].spec.channel in upgrade_requirement['core'][mas_channel]
    fail_msg: "Unable to upgrade from {{ suite_sub_info.resources[0].spec.channel }} to {{ mas_channel }}"

- name: "core : Check that install plan approvals are set to 'Automatic'"
  when:
    - suite_sub_info.resources[0].spec.channel != mas_channel
    - suite_sub_info.resources[0].spec.installPlanApproval is defined
  assert:
    that: suite_sub_info.resources[0].spec.installPlanApproval == 'Automatic'
    fail_msg: "Automatic install plan approvals must be enabled to upgrade via this role"


# 2. Lookup the OperatorCondition
# -----------------------------------------------------------------------------
- name: "core : Lookup OperatorCondition for ibm-mas"
  when: suite_sub_info.resources[0].spec.channel != mas_channel
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v2
    kind: OperatorCondition
    namespace: "{{ mas_namespace }}"
    label_selectors:
      - "operators.coreos.com/ibm-mas.{{ mas_namespace }}"
  register: opcon
  retries: 10
  delay: 60 # 1 minute
  until:
    - opcon.resources is defined
    - opcon.resources | length == 1
    - opcon.resources[0].metadata.name is defined

- name: "core : Debug OperatorCondition"
  when: suite_sub_info.resources[0].spec.channel != mas_channel
  debug:
    var: opcon


# 3. Set the operator version
# -----------------------------------------------------------------------------
# OperatorCondition names are in the format {packageName}.{packageVersion}
# We want to strip off the "v" prefix from the version while we do this
- name: "core : Lookup operator version for ibm-mas"
  when: suite_sub_info.resources[0].spec.channel != mas_channel
  set_fact:
    opcon_version: "{{ opcon.resources[0].metadata.name.split('.v')[1] }}"

- name: "core : Debug Operator Version"
  when: suite_sub_info.resources[0].spec.channel != mas_channel
  debug:
    msg:
      - "Operator condition ......... {{ opcon.resources[0].metadata.name }}"
      - "Operator version ........... {{ opcon_version }}"


# 4. Check that the Suite CR meets the required state
# -----------------------------------------------------------------------------
- name: "core : Get Suite CR for for ibm-mas"
  when: suite_sub_info.resources[0].spec.channel != mas_channel
  kubernetes.core.k8s_info:
    api_version: core.mas.ibm.com/v1
    name: "{{ mas_instance_id }}"
    namespace: "{{ mas_namespace }}"
    kind: Suite
  register: suite_info

- name: "core : Debug Suite CR"
  when: suite_sub_info.resources[0].spec.channel != mas_channel
  debug:
    var: suite_info

- name: "core : Check that the Suite CR exists"
  when: suite_sub_info.resources[0].spec.channel != mas_channel
  assert:
    that:
      - suite_info.resources is defined
      - suite_info.resources | length == 1
    fail_msg: "Maximo Application Suite has not been installed in namespace {{ mas_namespace }}"

- name: "core : Check that the Suite CR has been reconciled to the expected version for GA channels (Non feature)"
  when: 
    - suite_sub_info.resources[0].spec.channel != mas_channel
    - "'-feature' not in suite_sub_info.resources[0].spec.channel"
  assert:
    that:
      - suite_info.resources[0].status.versions.reconciled == opcon_version
    fail_msg: "Upgrade failed because Maximo Application Suite version ({{ suite_info.resources[0].status.versions.reconciled }}) is not at the expected version {{ opcon_version }}"

# reconciled: 9.1.0-pre.stable+8193 cr version
# opcon_version: 9.1.0-pre.stable-8193 operator condition
# above versions having `+` and `-` differences in feature channel (stable build)
- name: "core : Check that the Suite CR has been reconciled to the expected version for feature channels"
  when: 
    - suite_sub_info.resources[0].spec.channel != mas_channel
    - "'-feature' in suite_sub_info.resources[0].spec.channel"
  assert:
    that:
      - "(suite_info.resources[0].status.versions.reconciled | replace('+', '-') == opcon_version | replace('+', '-'))"
    fail_msg: "Upgrade failed because Maximo Application Suite version ({{ suite_info.resources[0].status.versions.reconciled }}) is not at the expected version {{ opcon_version }}"

- name: "core : Check that the Suite CR is in a healthy state"
  when: suite_sub_info.resources[0].spec.channel != mas_channel
  assert:
    that:
      - suite_info.resources | json_query('[*].status.conditions[?type==`Ready`][].reason') | select ('match','Ready') | list | length == 1
    fail_msg: "Upgrade failed because Maximo Application Suite is not healthy"
