---
# Note that the gencfg/main.yml task will actually create the config file,
# this task is just prepping the variables for that one.

- name: "udscfg : Fail if UDS contact information has not been provided"
  assert:
    that:
      - uds_contact.email is defined and uds_contact.email != ""
      - uds_contact.first_name is defined and uds_contact.first_name != ""
      - uds_contact.last_name is defined and uds_contact.last_name != ""
    fail_msg: "uds_contact property is required"

# 1. Lookup the endpoint route
# -----------------------------------------------------------------------------
- name: "udscfg : Lookup UDS endpoint Route"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Route
    name: uds-endpoint
    namespace: "ibm-common-services"
  register: uds_endpoint

- name: "udscfg : Fail if we didn't find the uds-endpoint route"
  assert:
    that: uds_endpoint.resources | length == 1
    fail_msg: "Failed looking up UDS endpoint route"

# 2. Lookup the UDS API key
# -----------------------------------------------------------------------------
- name: "udscfg : Lookup uds-api-key Secret"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: uds-api-key
    namespace: "ibm-common-services"
  register: uds_apikey_lookup

- name: "udscfg : Fail if we didn't find the secret containing the UDS API key"
  assert:
    that: uds_apikey_lookup.resources | length == 1
    fail_msg: "Failed looking up secret containing UDS API key"

# 3. Set the initial facts
# -----------------------------------------------------------------------------
- name: "udscfg : Set facts for BASCfg"
  set_fact:
    uds_api_key: "{{ uds_apikey_lookup.resources[0].data.apikey | b64decode }}"
    uds_endpoint_url: "https://{{uds_endpoint.resources[0].spec.host}}"
  no_log: true

# 4. Lookup the certificates
# -----------------------------------------------------------------------------
- name: "udscfg : Lookup the default cluster ingress secret"
  include_tasks: "{{ role_path }}/../../common_tasks/get_ingress_cert.yml"

# Break up the certificate into an array
- name: "udscfg : Set UDS cert variable"
  set_fact:
    uds_tls_crt: "{{ cluster_ingress_tls_crt }}"

# 5. Debug
# -----------------------------------------------------------------------------
- name: "udscfg : Debug generated config"
  debug:
    msg:
      - "UDS URL ............................ {{ uds_endpoint_url }}"
      - "Cluster Ingress TLS Certificate .... {{ cluster_ingress_tls_crt | default('<undefined>', True) }}"
      - "UDS TLS Certificate ................ {{ uds_tls_crt }}"
      - "UDS Contact First Name ............. {{ uds_contact.first_name | default('<undefined>', True) }}"
      - "UDS Contact Last Name .............. {{ uds_contact.last_name | default('<undefined>', True) }}"
      - "UDS Contact e-mail ................. {{ uds_contact.email | default('<undefined>', True) }}"
