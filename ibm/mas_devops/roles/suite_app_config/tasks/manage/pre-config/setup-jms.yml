---
# Manage specific steps to configure JMS bundle servers
# ------------------------------------------------------------------------
- name: "Get ManageWorkspace to lookup existing persistent volumes"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ManageWorkspace
    name: "{{ mas_instance_id }}-{{ mas_workspace_id }}"
    namespace: "mas-{{ mas_instance_id }}-manage"
  register: managews_output

- set_fact:
    existing_manage_pvcs: "{{ managews_output.resources[0].spec.settings.deployment.persistentVolumes | default([], true )}}"

- name: Set JMS persistent volumes settings
  set_fact:
    mas_app_settings_persistent_volumes_jms: "{{ existing_manage_pvcs | default([]) | ibm.mas_devops.setManagePVC(mas_app_settings_jms_queue_mount_path, mas_app_settings_jms_queue_pvc_name, mas_app_settings_jms_queue_pvc_size, mas_app_settings_jms_queue_pvc_storage_class, mas_app_settings_jms_queue_pvc_accessmode ) }}"

# merge with any existing persistent volume defined by other tasks
- set_fact:
    mas_app_settings_persistent_volumes: "{{ mas_app_settings_persistent_volumes + mas_app_settings_persistent_volumes_jms }}"

# ensure we remove duplicated persistent volumes configurations
- set_fact:
    mas_app_settings_persistent_volumes: "{{ mas_app_settings_persistent_volumes | unique }}"

- name: Debug Manage Persistent Volume settings to be configured
  debug:
    var: mas_app_settings_persistent_volumes

- name: Lookup existing JMS additional server config secrets with the expected naming convention
  shell: oc get secrets -n mas-{{ mas_instance_id }}-manage | grep {{ mas_workspace_id }}-manage-d--sb
  register: jms_secret_output
  failed_when: jms_secret_output.rc > 1

# check if JMS additional server config secrets are present, if so we skip it to avoid overriding existing content as we just care about having the proper secret name convention and not its content
- block:
    - name: "Replace manage-additional-server-config.xml file with jms_internal_endpoint: {{ server_bundle_jms_internal_endpoint }}"
      replace: dest='{{ role_path }}/files/manage/manage-additional-server-config.xml.j2' regexp='server_bundle_jms_internal_endpoint' replace='{{ server_bundle_jms_internal_endpoint }}' backup=no

    - name: "Replace manage-additional-server-config.xml file with jmsActivationSpec id: {{ mas_app_settings_server_bundles[mas_app_settings_server_bundles_size]['serverBundleEarFilename'] }}"
      replace: dest='{{ role_path }}/files/manage/manage-additional-server-config.xml.j2' regexp='serverBundleEarFilename' replace='{{ mas_app_settings_server_bundles[mas_app_settings_server_bundles_size]['serverBundleEarFilename'] }}' backup=no

    - name: "Replace manage-additional-server-config-no-activation.xml file with jms_internal_endpoint: {{ server_bundle_jms_internal_endpoint }}"
      replace: dest='{{ role_path }}/files/manage/manage-additional-server-config-no-activation.xml.j2' regexp='server_bundle_jms_internal_endpoint' replace='{{ server_bundle_jms_internal_endpoint }}' backup=no

    - name: "Replace manage-jms-additional-server-config.xml file with mas_app_settings_jms_queue_mount_path: {{ mas_app_settings_jms_queue_mount_path }}"
      replace: dest='{{ role_path }}/files/manage/manage-jms-additional-server-config.xml.j2' regexp='mas_app_settings_jms_queue_mount_path' replace='{{ mas_app_settings_jms_queue_mount_path }}' backup=no

    - name: Create Manage app JMS additional server config secrets if not present yet
      kubernetes.core.k8s:
        definition: "{{ lookup('template', 'templates/manage/{{mas_app_settings_server_bundles_size}}-manage-additional-server-config-secrets.yml.j2') }}"

  when: jms_secret_output.stdout_lines | length == 0
