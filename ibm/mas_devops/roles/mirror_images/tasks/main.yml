---
# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "{{ manifest_name }} : Fail if required properties are not provided"
  assert:
    that:
      - manifest_name is defined and manifest_name != ""
      - manifest_version is defined and manifest_version != ""
      - mirror_mode is defined and mirror_mode != ""
      - mirror_working_dir is defined and mirror_working_dir != ""
    fail_msg: "One or more required properties are missing"

- name: "{{ manifest_name }} : Debug"
  debug:
    msg:
      - "Manifest Name .......................... {{ manifest_name }}"
      - "Manifest Version ....................... {{ manifest_version }}"
      - "Mirror Single Architecture ............. {{ mirror_single_arch | default('<not set>', True) }}"
      - "Working Directory ...................... {{ mirror_working_dir }}"
      - "Mode ................................... {{ mirror_mode }}"
      - "Auth File .............................. {{ auth_file }}"

# 2. Set up auth secret
# -----------------------------------------------------------------------------
- name: "{{ manifest_name }} : Create working directory"
  file:
    path: "{{ ansible_env.HOME }}/.ibm-mas"
    state: directory

- name: "{{ manifest_name }} : Create auth secret"
  ansible.builtin.template:
    src: templates/auth-secret.json.j2
    dest: "{{ auth_file }}"
  no_log: true

# 3. Modify the manifest
# -----------------------------------------------------------------------------
- name: Validate that mirror_single_arch is correctly set
  assert:
    that: mirror_single_arch in ["", "amd64", "ppc64le", "s390x"]

- name: Set up exclusion rules for amd64
  when: mirror_single_arch == "amd64"
  set_fact:
    exclude_arch:
      - s390x
      - ppc64le

- name: Set up exclusion rules for ppc64le
  when: mirror_single_arch == "ppc64le"
  set_fact:
    exclude_arch:
      - s390x
      - amd64

- name: Set up exclusion rules for s390x
  when: mirror_single_arch == "s390x"
  set_fact:
    exclude_arch:
      - amd64
      - ppc64le

- name: "Remove any container images with a tag ending in '-{arch}'"
  when: mirror_single_arch in ["amd64", "ppc64le", "s390x"]
  ansible.builtin.lineinfile:
    path: "{{ mirror_working_dir }}/manifests/{{ mirror_mode }}/{{ manifest_name }}_{{ manifest_version }}.txt"
    state: absent
    regexp: "-{{ item }}$"
    backup: true
  with_items: "{{ exclude_arch }}"

# Special case for Db2u
# https://github.com/ibm-mas/ansible-devops/issues/1075
- name: "Remove CP4D Db2u images (11.5.8.0)"
  when: manifest_name == "ibm-db2uoperator"
  ansible.builtin.lineinfile:
    path: "{{ mirror_working_dir }}/manifests/{{ mirror_mode }}/{{ manifest_name }}_{{ manifest_version }}.txt"
    state: absent
    regexp: "11.5.8.0"
    backup: true

# 4A. Execute the mirror (to filesystem)
# -----------------------------------------------------------------------------
- name: "{{ manifest_name }} : Mirror Images to local filesystem"
  when: mirror_mode == "to-filesystem"
  block:
    - name: "{{ manifest_name }}: Run mirror command"
      shell: |
        oc image mirror \
          -a {{ auth_file }} \
          -f {{ mirror_working_dir }}/manifests/to-filesystem/{{ manifest_name }}_{{ manifest_version }}.txt \
          --filter-by-os '.*'  \
          --insecure  \
          --skip-multiple-scopes \
          --max-per-registry=1 \
          --dir={{ mirror_working_dir }}
      register: ocimagemirror_result
      ignore_errors: true

    - name: "{{ manifest_name }} : Debug mirror command"
      debug:
        msg:
          - "Source: {{ mirror_working_dir }}/manifests/to-filesystem/{{ manifest_name }}_{{ manifest_version }}.txt"
          - "Auth: {{ auth_file }}"
          - "{{ (ocimagemirror_result.rc == 0) | ternary(ocimagemirror_result.stdout_lines, ocimagemirror_result.stderr_lines) }}"

    - name: "{{ manifest_name }} : Fail if mirror is not successful"
      assert:
        that: ocimagemirror_result.rc == 0
        fail_msg: "Image mirroring failed (see debug information above)."

# 4B. Create AWS ECR Repositories if required
# -----------------------------------------------------------------------------
- name: "Create AWS ECR Repositories"
  when:
    - mirror_mode == "direct" or mirror_mode == "from-filesystem"
    - registry_is_ecr == true
  block:
    - name: "{{ manifest_name }} : dry mode mirror command - direct"
      shell: |
        oc image mirror \
          -a {{ auth_file }} \
          -f {{ mirror_working_dir }}/manifests/direct/{{ manifest_name }}_{{ manifest_version }}.txt \
          --filter-by-os '.*'  \
          --insecure  \
          --skip-multiple-scopes \
          --max-per-registry=1 \
          --dry-run=true
      register: ocimagemirror_dryrun_result
      ignore_errors: true
      when: mirror_mode == "direct"

    - name: "{{ manifest_name }} : dry mode mirror command - from-filesystem"
      shell: |
        oc image mirror \
          -a {{ auth_file }} \
          -f {{ mirror_working_dir }}/manifests/from-filesystem/{{ manifest_name }}_{{ manifest_version }}.txt \
          --filter-by-os '.*'  \
          --insecure  \
          --skip-multiple-scopes \
          --max-per-registry=1 \
          --dir={{ mirror_working_dir }}
      register: ocimagemirror_dryrun_result
      ignore_errors: true
      when: mirror_mode == "from-filesystem"

    - name: "{{ manifest_name }} : Debug dry mode mirror command"
      debug:
        msg:
          - "{{ (ocimagemirror_result.rc == 0) | ternary(ocimagemirror_result.stdout_lines, ocimagemirror_result.stderr_lines) }}"

    - name: "{{ manifest_name }} : Fail if dry mode mirror is not successful"
      assert:
        that: ocimagemirror_dryrun_result.rc == 0
        fail_msg: "mirror command in dry mode failed."

    - name: Filter out repository names that must be created in ECR
      set_fact:
        repos_to_add: "{{ ocimagemirror_dryrun_result.stderr_lines | ibm.mas_devops.get_ecr_repositories }}"

    - name: Repositories that will be created in ECR
      debug:
        msg: "{{ repos_to_add }}"

    - name: Create ECR Repositories
      ansible.builtin.shell: "aws ecr create-repository --repository-name {{ item }} --image-tag-mutability IMMUTABLE --region {{ registry_ecr_aws_region }}"
      ignore_errors: true
      loop: "{{ repos_to_add }}"

# 4C. Execute the mirror (from filesystem)
# -----------------------------------------------------------------------------
- name: "{{ manifest_name }} : Mirror Images from local filesystem"
  when: mirror_mode == "from-filesystem"
  block:
    - name: "{{ manifest_name }} : Run mirror command"
      shell: |
        oc image mirror \
          -a {{ auth_file }} \
          -f {{ mirror_working_dir }}/manifests/from-filesystem/{{ manifest_name }}_{{ manifest_version }}.txt \
          --filter-by-os '.*'  \
          --insecure  \
          --skip-multiple-scopes \
          --max-per-registry=1 \
          --dir={{ mirror_working_dir }}
      register: ocimagemirror_result
      ignore_errors: true

    - name: "{{ manifest_name }} : Debug mirror command"
      debug:
        msg:
          - "Source: {{ mirror_working_dir }}/manifests/from-filesystem/{{ manifest_name }}_{{ manifest_version }}.txt"
          - "Auth: {{ auth_file }}"
          - "{{ (ocimagemirror_result.rc == 0) | ternary(ocimagemirror_result.stdout_lines, ocimagemirror_result.stderr_lines) }}"

    - name: "{{ manifest_name }} : Fail if mirror is not successful"
      assert:
        that: ocimagemirror_result.rc == 0
        fail_msg: "Image mirroring failed (see debug information above)."

# 4D. Execute the mirror (direct)
# -----------------------------------------------------------------------------
- name: "Mirror Images directly"
  when: mirror_mode == "direct"
  block:
    - name: "{{ manifest_name }} : Run mirror command"
      shell: |
        oc image mirror \
          -a {{ auth_file }} \
          -f {{ mirror_working_dir }}/manifests/direct/{{ manifest_name }}_{{ manifest_version }}.txt \
          --filter-by-os '.*'  \
          --insecure  \
          --skip-multiple-scopes \
          --max-per-registry=1 \
      register: ocimagemirror_result
      ignore_errors: true

    - name: "{{ manifest_name }} : Debug mirror command"
      debug:
        msg:
          - "Source: {{ mirror_working_dir }}/manifests/direct/{{ manifest_name }}_{{ manifest_version }}.txt"
          - "Auth: {{ auth_file }}"
          - "{{ (ocimagemirror_result.rc == 0) | ternary(ocimagemirror_result.stdout_lines, ocimagemirror_result.stderr_lines) }}"

    - name: "{{ manifest_name }} : Fail if mirror is not successful"
      assert:
        that: ocimagemirror_result.rc == 0
        fail_msg: "Image mirroring failed (see debug information above)."
