---
- name: Load variables (main)
  include_vars: "vars/main.yml"

# Load default storage class (if not provided by the user)
# -----------------------------------------------------------------------------
- include_tasks: tasks/determine-storage-classes.yml

# create minio namespace
- name: 'Create minio namespace'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/minio-ns.yml.j2') }}"

# create ibm-entitlement for minio
# -----------------------------------------------------------------------------
- name: "Create ibm-entitlement secret in minio namespace"
  vars:
    entitledAuthStr: "{{ minio_registry_user }}:{{ minio_registry_token }}"
    entitledAuth: "{{ entitledAuthStr | b64encode }}"
    content:
      - '{"auths":{"{{ minio_registry }}":{"username":"{{ minio_registry_user }}","password":"{{ minio_registry_token }}","auth":"{{entitledAuth}}"}'
      - "}"
      - "}"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/dockerconfigjson
      metadata:
        name: ibm-entitlement
        namespace: minio
      stringData:
        .dockerconfigjson: "{{ content | join('') | string }}"

# create minio PVC
- name: 'Create minio pvc'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/minio-pvc.yml.j2') }}"

# create minio deployment
- name: 'Create minio deployment'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/minio-deployment.yml.j2') }}"

# create minio service
- name: 'Create minio service'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/minio-service.yml.j2') }}"

# create minio route
- name: 'Create minio route'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/minio-route.yml.j2') }}"
