---
- name: Load variables (main)
  include_vars: "vars/main.yml"

# Get cluster domain
# -----------------------------------------------------------------------------
- name: "Get cluster subdomain"
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: _cluster_subdomain

- name: "Set fact: cluster subdomain"
  set_fact:
    cluster_domain: "{{ _cluster_subdomain.resources[0].spec.domain }}"

- name: "Debug: cluster domain"
  debug:
    msg: "Cluster domain ........................ {{ cluster_domain }}"

# Load default storage class (if not provided by the user)
# -----------------------------------------------------------------------------
- include_tasks: tasks/determine-storage-classes.yml

# create minio namespace
- name: 'Create minio namespace'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/minio-ns.yml.j2') }}"

# create minio certs for TLS
- name: "Create internal CA certificate issuer"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/certs/ca-issuer.yml.j2') }}"
  register: createCaIssuer

- name: "Create and wait for CA certificate"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/certs/ca-certificate.yml.j2') }}"
    wait: yes
    wait_timeout: 600
    wait_condition:
      type: Ready
      status: True
  register: createCaCert

- name: 'Create certificate issuer'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/certs/issuer.yml.j2') }}"
  register: createIssuer

- name: 'Create minio certificate'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/certs/certificate.yml.j2') }}"
  register: createCertificate
  
# create minio PVC
- name: 'Create minio pvc'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/minio-pvc.yml.j2') }}"

# create minio deployment
- name: 'Create minio deployment'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/minio-deployment.yml.j2') }}"

 # 1. Extract CA Certificate Secret Name (from CA Certificate)
- name: "Get CA certificate secret name"
  set_fact:
    CaCertSecret: "{{ createCaCert.result.spec.secretName }}"

- name: "Debug createCaCert output"
  debug:
    var: CaCertSecret

# 2. Read the CA certificate secret
- name: "Read CA certificate secret"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ CaCertSecret }}"
    namespace: "{{ minio_namespace }}"
  register: caSecret

# 4. Extract MinIO TLS Certificate Secret Name (from Certificate)
- name: "Get MinIO certificate secret name"
  set_fact:
    createSecret: "{{ createCertificate.result.spec.secretName }}"

- name: "Debug createCaCert output"
  debug:
    var: createSecret

# 5. Read the MinIO TLS certificate secret
- name: "Read MinIO certificate secret"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ createSecret }}"
    namespace: "{{ minio_namespace }}"
  register: certSecret

# create minio service
- name: 'Create minio service'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/minio-service.yml.j2') }}"

# create minio route
- name: 'Create minio route'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/minio/minio-route.yml.j2') }}"



