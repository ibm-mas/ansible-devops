---
# cos_apikey is required in order to be able to lookup cos resources
- name: "Fail if cos_apikey is not provided"
  assert:
    that: cos_apikey is defined and cos_apikey != ""
    fail_msg: "cos_apikey property is required"

# cos_instance_name is required in order to be able to create cos resources i.e credentials and buckets
- name: "Fail if cos_instance_name is not provided"
  assert:
    that: cos_instance_name is defined and cos_instance_name != ""
    fail_msg: "cos_instance_name property is required"

# 1. Determine the instance name
# ---------------------------------------------------------------------------------------------------------------------
- name: "Delete IBM COS Bucket: Debug general info"
  debug:
    msg:
      - "IBM Cloud Resource Group ........... {{ ibmcloud_resourcegroup }}"
      - "IBM COS url ........................ {{ cos_url }}"
      - "IBM COS instance name .............. {{ cos_instance_name }}"
      - "IBM COS location info .............. {{ cos_location_info }}"
      - "IBM COS bucket name ................ {{ cos_bucket_name }}"
      - "IBM COS bucket storage class........ {{ cos_bucket_storage_class }}"
      - "IBM COS bucket location ............ {{ cos_bucket_region_location }}"

# 2. Lookup IBM Cloud Resource Group GUID
# ---------------------------------------------------------------------------------------------------------------------
- name: "ibm : Retrieve resource group guid"
  ibm.cloudcollection.ibm_resource_group_info:
    name: "{{ ibmcloud_resourcegroup }}"
    ibmcloud_api_key: "{{ cos_apikey }}"
  register: rg_info

- name: "ibm : Debug group GUID"
  debug:
    msg:
      - "Resource Group GUID ... {{ rg_info.resource.id }}"

- name: "ibm : Set resource group guid variable"
  when:
    - rg_info.resource.id is defined
  set_fact:
    resourceGID: "{{ rg_info.resource.id }}"

# 3. Retrieve COS instance
# ---------------------------------------------------------------------------------------------------------------------
- name: "Retrieve IBM COS instance ID"
  ibm.cloudcollection.ibm_resource_instance_info:
    name: "{{ cos_instance_name }}"
    resource_group_id: "{{ resourceGID }}"
    service: "cloud-object-storage"
    location: "{{ cos_location_info }}"
    ibmcloud_api_key: "{{ cos_apikey  }}"
  register: cos_info

- name: "Set resource instance id variable"
  when: cos_info.resource.id is defined
  set_fact:
    cos_resource_id: "{{ cos_info.resource.id }}"

# 4. Delete COS bucket
# ---------------------------------------------------------------------------------------------------------------------
- name: "Lookup IBM COS bucket named '{{ cos_bucket_name }}' in COS instance '{{ cos_instance_name }}'"
  ibm.cloudcollection.ibm_cos_bucket_info:
    resource_instance_id: "{{ cos_resource_id }}"
    ibmcloud_api_key: "{{ cos_apikey  }}"
    bucket_name: "{{ cos_bucket_name }}"
    bucket_type: "{{ cos_bucket_region_location_type }}"
    bucket_region: "{{ cos_bucket_region_location }}"
  register: cos_bucket_lookup
  ignore_errors: true # for some reason if bucket does not exist, 'ibm_cos_bucket_info' module fails, might be a bug.

- name: "Debug IBM COS Bucket Lookup Information"
  debug:
    msg: "{{ cos_bucket_lookup }}"

- name: "ibm: Assert cos bucket '{{ cos_bucket_name }}' exists, otherwise can't delete it"
  assert:
    that:
      - cos_bucket_lookup.resource is defined
      - cos_bucket_lookup.resource.bucket_name is defined
      - cos_bucket_lookup.resource.bucket_name != ''
      - cos_bucket_lookup.rc == 0 # means bucket exists so it can be deleted
    fail_msg: "Bucket {{ cos_bucket_name}} could not be found!"

- name: "Set resource instance id variable"
  when: cos_bucket_lookup.resource.id is defined
  set_fact:
    cos_bucket_resource_id: "{{ cos_bucket_lookup.resource.id }}"
    cos_bucket_resource_instance_id: "{{ cos_bucket_lookup.resource.resource_instance_id }}"

- name: "Delete cos bucket"
  ibm.cloudcollection.ibm_cos_bucket:
    resource_instance_id: "{{ cos_bucket_resource_instance_id }}"
    id: "{{ cos_bucket_resource_id }}"
    ibmcloud_api_key: "{{ cos_apikey  }}"
    bucket_name: "{{ cos_bucket_name }}"
    state: absent
  register: cos_bucket_delete_output

- name: "ibm: Assert cos bucket '{{ cos_bucket_name }}' was deleted"
  assert:
    that:
      - cos_bucket_delete_output.rc == 0
      - 'cos_bucket_delete_output.stdout_lines | select("equalto", "Destroy complete! Resources: 1 destroyed.") | list | length'
    fail_msg: "{{ cos_bucket_delete_output.stdout_lines }}"
