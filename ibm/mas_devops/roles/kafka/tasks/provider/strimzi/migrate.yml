---
# 10. Deploy the controller as NodePool
# -----------------------------------------------------------------------------
- name: "Create the Controller"
  kubernetes.core.k8s:
    apply: yes
    template: "templates/redhat/nodepools/controller.yml.j2"


# 10. Deploy the controller as NodePool
# -----------------------------------------------------------------------------
- name: "Create the Broker"
  kubernetes.core.k8s:
    apply: yes
    template: "templates/redhat/nodepools/broker.yml.j2"


# 10. Deploy the controller as NodePool
# -----------------------------------------------------------------------------
- name: "Get the kafka instance"
  kubernetes.core.k8s_info:
    api_version: kafka.strimzi.io/v1beta2
    kind: Kafka
    namespace: "{{ kafka_namespace }}"
    name: "{{ kafka_cluster_name }}"
  register: kafka_cluster


# 10. Patch Kafka instance to add KRaft and NodePool annotations
# -----------------------------------------------------------------------------
- name: "Get the kafka instance"
  kubernetes.core.k8s:
    api_version: kafka.strimzi.io/v1beta2
    kind: Kafka
    namespace: "{{ kafka_namespace }}"
    name: "{{ kafka_cluster_name }}"
    merge_type: merge
    definition:
          metadata:
            annotations:
              strimzi.io/kraft: disabled
              strimzi.io/node-pools: enabled


# 10. Trigger the ZooKeeper migration
# -----------------------------------------------------------------------------
- name: "Get the kafka instance"
  kubernetes.core.k8s:
    api_version: kafka.strimzi.io/v1beta2
    kind: Kafka
    namespace: "{{ kafka_namespace }}"
    name: "{{ kafka_cluster_name }}"
    merge_type: merge
    definition:
          metadata:
            annotations:
              strimzi.io/kraft: migration


# 10. Finalize the migration
# -----------------------------------------------------------------------------
- name: "Wait for the migration to finish"
  kubernetes.core.k8s_info:
    api_version: kafka.strimzi.io/v1beta2
    kind: Kafka
    namespace: "{{ kafka_namespace }}"
    name: "{{ kafka_cluster_name }}"
  register: kafka_cluster_cr
  retries: 10
  delay: 30
  until: 
    - kafka_cluster_cr.resources[0].status.kafkaMetadataState is defined
    - kafka_cluster_cr.resources[0].status.kafkaMetadataState == "KRaftPostMigration"


# 10. Trigger the ZooKeeper migration
# -----------------------------------------------------------------------------
- name: "Enable KRaft annotation on the Kafka CRD"
  kubernetes.core.k8s:
    api_version: kafka.strimzi.io/v1beta2
    kind: Kafka
    namespace: "{{ kafka_namespace }}"
    name: "{{ kafka_cluster_name }}"
    merge_type: merge
    definition:
          metadata:
            annotations:
              strimzi.io/kraft: enabled


# 10. Finalize the migration
# -----------------------------------------------------------------------------
- name: "Wait for the migration to finish"
  kubernetes.core.k8s_info:
    api_version: kafka.strimzi.io/v1beta2
    kind: Kafka
    namespace: "{{ kafka_namespace }}"
    name: "{{ kafka_cluster_name }}"
  register: kafka_cluster_cr
  retries: 10
  delay: 30
  until: 
    - kafka_cluster_cr.resources[0].status.kafkaMetadataState is defined
    - kafka_cluster_cr.resources[0].status.kafkaMetadataState == "KRaft"


# 10. Finalize the migration
# -----------------------------------------------------------------------------
- name: "Delete the ZooKeeper section from the Kafka CRD"
  kubernetes.core.k8s_json_patch:
    api_version: kafka.strimzi.io/v1beta2
    kind: Kafka
    namespace: "{{ kafka_namespace }}"
    name: "{{ kafka_cluster_name }}"
    patch:
      - op: remove
        path: /spec/zookeeper


# 10. Deploy the controller as NodePool
# -----------------------------------------------------------------------------
- name: "Get the Kafka CR instance"
  kubernetes.core.k8s_info:
    api_version: kafka.strimzi.io/v1beta2
    kind: Kafka
    namespace: "{{ kafka_namespace }}"
    name: "{{ kafka_cluster_name }}"
  register: kafka_cluster_cr

- name: "Assert that the CR is switched to KRaft"
  assert:
        that:
          - kafka_cr_status.resources[0].status.kafkaMetadataState == "KRaft"
        fail_msg: "Kafka CR is not in KRaft mode, try restarting the migration."
