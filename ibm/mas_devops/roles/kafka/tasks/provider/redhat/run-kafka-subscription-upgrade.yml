---
# 1. Get the list of all KafkaCluster instances
# -----------------------------------------------------------------------------

- name: "Get kafka instance list"
  kubernetes.core.k8s_info:
    api_version: kafka.strimzi.io/v1beta2
    kind: Kafka
    namespace: "{{ kafka_namespace }}"
  register: kafka_cluster_list

# 2. Debug Properties
# -----------------------------------------------------------------------------
- name: "Debug list of kafka instances"
  debug:
    msg:
      - "Kafka Cluster Names ...................... {{ kafka_cluster_list.resources | map(attribute='metadata.name') }}"
      - "Kafka Cluster Namespace .................. {{ kafka_namespace }}"
      - "Kafka Cluster Versions ................... {{ kafka_cluster_list.resources | map(attribute='spec.kafka.version') }}"
      - "Kafka Cluster Modes ...................... {{ kafka_cluster_list.resources | map(attribute='status.kafkaMetadataState') }}"
  when: kafka_cluster_list.resources is defined

- name: "Get and set variables to store the lists"
  set_fact:
    kafkaCluster_names: "{{ kafka_cluster_list.resources | map(attribute='metadata.name') }}"
    kafkaCluster_versions: "{{ kafka_cluster_list.resources | map(attribute='spec.kafka.version') }}"
    kafkaCluster_modes: "{{ kafka_cluster_list.resources | map(attribute='status.kafkaMetadataState') }}"
  when: kafka_cluster_list.resources is defined

# 3. Run migration on the ZooKeeper instances
# -----------------------------------------------------------------------------
- name: "Process clusters list"
  include_tasks: tasks/provider/redhat/migrate.yml
  loop: "{{ kafka_cluster_list.resources }}"
  loop_control:
    loop_var: kafka_cluster
  vars:
    kafka_namespace: "{{ kafka_cluster.metadata.namespace }}"
    kafka_cluster_name: "{{ kafka_cluster.metadata.name }}"
  when:
    - kafka_cluster_list.resources is defined
    - kafka_cluster.status.kafkaMetadataState == 'ZooKeeper'
    - kafka_cluster.spec.kafka.version is version('2.8.0', '>=')

# 4. Upgrade Subscription
# -----------------------------------------------------------------------------
- name: "Get the current subscription channel for kafka"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    name: "{{ kafka_operator_name }}"
    namespace: "{{ kafka_namespace }}"
    kind: Subscription
  register: kafka_sub_info

- name: "Set the value for the current channel for kafka"
  set_fact:
    old_kafka_channel: "{{ kafka_sub_info.resources[0].spec.channel }}"
    old_kafka_csv: "{{ kafka_sub_info.resources[0].status.currentCSV }}"

# Force the upgrade. This seems to be necessary because the install never happens
# when we update the channel
- name: "Delete Kafka Subscription"
  kubernetes.core.k8s:
    api_version: operators.coreos.com/v1alpha1
    name: "{{ kafka_operator_name }}"
    namespace: "{{ kafka_namespace }}"
    kind: Subscription
    state: absent

- name: "Delete Kafka CSV"
  kubernetes.core.k8s:
    api_version: operators.coreos.com/v1alpha1
    name: "{{ old_kafka_csv }}"
    namespace: "{{ kafka_namespace }}"
    kind: ClusterServiceVersion
    state: absent

- name: "Pause for 30 seconds before reinstall subscription..."
  pause:
    seconds: 30

# Rerun install to reapply csv, subscription, and update any configs
- include_tasks: tasks/provider/redhat/install-kafka.yml
