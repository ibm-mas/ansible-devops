---
# Lookup kafka versions supported by the installed Strimzi operator
# This mapping information is found here: https://strimzi.io/downloads
# This task will store the website content into a variable and parse it to a dict
# so that we can extract the supported kafka version list based upon the installed csv
# Note: This only works for Strimzi as long as the above page remains in this html structure
# Could not find the corresponding information for Red Hat AMQ Streams, but if we ever do, hopefully this can be reused
# -------------------------------------------------------------------------------------------------------------------------
- name: "Lookup {{ kafka_provider }} subscription"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    namespace: "{{ kafka_namespace }}"
    kind: Subscription
    label_selectors:
      - operators.coreos.com/{{ kafka_operator_name }}.{{ kafka_namespace }}
  register: kafka_subscription_lookup
  retries: 10 # will wait for up to 5 minutes
  delay: 30 # seconds
  until:
    - kafka_subscription_lookup.resources is defined
    - kafka_subscription_lookup.resources | length > 0
    - kafka_subscription_lookup.resources[0].status is defined
    - kafka_subscription_lookup.resources[0].status.installedCSV is defined

- name: "Assert that {{ kafka_operator_name }} operator is installed"
  assert:
    that:
      - kafka_subscription_lookup.resources is defined
      - kafka_subscription_lookup.resources | length > 0
      - kafka_subscription_lookup.resources[0].status is defined
      - kafka_subscription_lookup.resources[0].status.installedCSV is defined
    fail_msg: "Failed! {{ kafka_operator_name }} operator/subscription not found in {{ kafka_namespace }} namespace."

- name: "Set installed kafka operator csv"
  set_fact:
    kafka_csv_version: "{{ kafka_subscription_lookup.resources[0].status.installedCSV | regex_search(regex) }}"
  vars:
    regex: "(?<=strimzi-cluster-operator.v)(.*)"

- name: "Debug existing installed csv for {{ kafka_operator_name }} subscription"
  debug:
    var: kafka_csv_version

- name: Get html page content
  ignore_errors: yes
  shell: wget https://strimzi.io/downloads -q -O -
  register: strimzi_page_content

# When website is available and content is found, try to retrieve the supported kafka versions
# If website is not reachable, then skip it
- when:
    - strimzi_page_content.rc == 0
    - strimzi_page_content.stdout | length > 0
  block:
    - name: Read html page content
      set_fact:
        file_lines: "{{ strimzi_page_content.stdout.split('\n') }}"

    - name: "Creating dictionary while looping over page content"
      ignore_errors: true
      vars:
        url_line: 'td class="description"><a href="https://github.com/strimzi/strimzi-kafka-operator/releases/tag/{{ kafka_csv_version }}'
        key: "{{file_lines[my_idx+3] | replace('<td class=\"version\">','') | replace('</td>','') | regex_replace('<td class.*','') | regex_replace('^\\s*','') | regex_replace(' ', '') | split(',') }}"
      set_fact:
        kafka_supported_versions: "{{ result | default([]) + key }}"
      when: url_line in line_item
      loop: "{{ file_lines }}"
      loop_control:
        loop_var: line_item
        index_var: my_idx

# Check if kafka_version run against any of the supported versions
- name: "Debug Kafka supported versions"
  debug:
    msg:
      - "Supported kafka versions ................... {{ kafka_supported_versions | default('Not available') }}"
      - "Current kafka version defined .............. {{ kafka_version }}"

- name: "Set latest supported kafka version if current kafka version is unsupported"
  when:
    - kafka_supported_versions is defined
    - kafka_supported_versions | length > 0
    - kafka_version is not in kafka_supported_versions
  set_fact:
    kafka_version: "{{ kafka_supported_versions | last }}" # use latest version supported if current defined version is not supported

- name: "Kafka version defined"
  debug:
    msg: "{{ kafka_version }}"
