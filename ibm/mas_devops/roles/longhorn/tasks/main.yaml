---
# Register the Helm repository
# -----------------------------------------------------------------------------
- name: Add longhorn chart repo
  kubernetes.core.helm_repository:
    name: longhorn
    repo_url: https://charts.longhorn.io


# Determine the OCP release
# -----------------------------------------------------------------------------
# We need this information for the helm values file
- name: "Look up cluster OCP version"
  when: ocp_release is not defined or ocp_release == ""
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    name: "version"
    kind: ClusterVersion
  register: ocp_version_lookup

- name: "Set ocp version number"
  when:
    - ocp_version_lookup is defined
    - ocp_version_lookup.resources[0] is defined
  set_fact:
    ocp_release: "{{ ocp_version_lookup.resources[0].status.desired.version | regex_search('^([0-9]+)\\.([0-9]+)') }}"

- name: "Assert that the ocp_release is set"
  assert:
    that: ocp_release is defined and ocp_release != ""
    fail_msg: "ocp_release could not be determined from the ClusterVersion resource and was not provided directly"


# Create the namespace
# -----------------------------------------------------------------------------
- name: "Create {{ longhorn_namespace }} namespace"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/namespace.yml.j2') }}"


# Install Longhorn
# -----------------------------------------------------------------------------
- name: "Install longhorn helm chart to {{ longhorn_namespace }}"
  kubernetes.core.helm:
    name: longhorn
    chart_ref: longhorn/longhorn
    release_namespace: "{{ longhorn_namespace }}"
    values: "{{ lookup('template', 'values.yml.j2') | from_yaml }}"


# Wait for deployments to be running
# -----------------------------------------------------------------------------
- name: "Wait for longhorn-driver-deployer"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: longhorn-driver-deployer
    namespace: "{{ longhorn_namespace }}"
    kind: Deployment
  register: longhorn_driver_lookup
  until:
    - longhorn_driver_lookup.resources is defined
    - longhorn_driver_lookup.resources | length == 1
    - longhorn_driver_lookup.resources[0].status is defined
    - longhorn_driver_lookup.resources[0].status.readyReplicas is defined
    - longhorn_driver_lookup.resources[0].status.replicas is defined
    - longhorn_driver_lookup.resources[0].status.readyReplicas == longhorn_driver_lookup.resources[0].status.replicas
  retries: 10
  delay: 30 # seconds

- name: "Wait for csi-provisioner"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: csi-provisioner
    namespace: "{{ longhorn_namespace }}"
    kind: Deployment
  register: longhorn_csi_provisioner_lookup
  until:
    - longhorn_csi_provisioner_lookup.resources is defined
    - longhorn_csi_provisioner_lookup.resources | length == 1
    - longhorn_csi_provisioner_lookup.resources[0].status is defined
    - longhorn_csi_provisioner_lookup.resources[0].status.readyReplicas is defined
    - longhorn_csi_provisioner_lookup.resources[0].status.replicas is defined
    - longhorn_csi_provisioner_lookup.resources[0].status.readyReplicas == longhorn_csi_provisioner_lookup.resources[0].status.replicas
  retries: 10
  delay: 30 # seconds

- name: "Wait for longhorn storageclass to be available"
  kubernetes.core.k8s_info:
    api_version: storage.k8s.io/v1
    name: longhorn
    kind: StorageClass
  register: longhorn_storage_class_lookup
  until:
    - longhorn_storage_class_lookup.resources is defined
    - longhorn_storage_class_lookup.resources | length == 1
  retries: 10
  delay: 30 # seconds
