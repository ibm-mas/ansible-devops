---
# 1. Fail if required parameters are not set
# -----------------------------------------------------------------------------
- name: "Fail if required properties have not been provided"
  assert:
    that:
      - db2_instance_name is defined and db2_instance_name != ""
      - ibm_entitlement_key is defined and ibm_entitlement_key != ""
    fail_msg: "One or more required properties have not been set"

- name: "Fail if required db2_dbname is over 8 characters"
  assert:
    that:
      - db2_dbname is defined and db2_dbname != ""
      - db2_dbname | length <= 8
    fail_msg: "Property value of db2_dbname is set to '{{ db2_dbname }}' and is greater than 8 character long."

# 2. Load default storage classes (if not provided by the user)
# -----------------------------------------------------------------------------
- include_tasks: tasks/install/determine-storage-classes.yml

# 3. Setup the norootsquash daemonsets for db2u pods to work with NFS backed storage
# -----------------------------------------------------------------------------
- include_tasks: tasks/install/setup_norootsquash.yml
  when:
    - db2_meta_storage_class is defined
    - db2_data_storage_class is defined
    - '"ibmc-file" in db2_data_storage_class or "ibmc-file" in db2_meta_storage_class or "ibmc-vpc-file" in db2_data_storage_class or "ibmc-vpc-file" in db2_meta_storage_class'

# 4. Provide debug information to the user
# -----------------------------------------------------------------------------
- name: "Debug - MAS"
  debug:
    msg:
      - "MAS Instance ID ........................ {{ mas_instance_id }}"
      - "MAS Config directory ................... {{ mas_config_dir }}"
      - "MAS Instance ID ........................ {{ mas_instance_id | default('<undefined>', true) }}"
      - "MAS Workspace ID ....................... {{ mas_workspace_id | default('<undefined>', true) }}"
      - "MAS Application ID ..................... {{ mas_application_id | default('<undefined>', true) }}"
      - "MAS Config Directory ................... {{ mas_config_dir | default('<undefined>', true) }}"
      - "MAS Config Scope ....................... {{ mas_config_scope | default('<undefined>', true) }}"

- name: "Debug - Affinity & Tolerations"
  debug:
    msg:
      - "Affinity key ........................... {{ db2_affinity_key | default('<undefined>', true) }}"
      - "Affinity value ......................... {{ db2_affinity_value | default('<undefined>', true) }}"

      - "Toleration key ......................... {{ db2_tolerate_key | default('<undefined>', true) }}"
      - "Toleration value ....................... {{ db2_tolerate_value | default('<undefined>', true) }}"
      - "Toleration effect ...................... {{ db2_tolerate_effect | default('<undefined>', true) }}"

- name: "Debug - Db2 Instance"
  debug:
    msg:
      - "Namespace .............................. {{ db2_namespace }}"
      - "Db2 Instance ........................... {{ db2_instance_name }}"

- name: "Debug - Database Settings"
  debug:
    msg:
      - "Database Name .......................... {{ db2_dbname }}"
      - "4K Device Support ...................... {{ db2_4k_device_support }}"
      - "Table Organization ..................... {{ db2_table_org }}"
      - "TLS Version ............................ {{ tls_version }}"
      - "Workload ............................... {{ db2_workload }}"

- name: "Debug - Resources"
  debug:
    msg:
      - "CPU Request ............................ {{ db2_cpu_requests }}"
      - "CPU Limit .............................. {{ db2_cpu_limits }}"
      - "Memory Request ......................... {{ db2_memory_requests }}"
      - "Memory Limit ........................... {{ db2_memory_limits }}"

- name: "Debug - Storage"
  debug:
    msg:
      - "Meta ................................... {{ db2_meta_storage_class }} - {{ db2_meta_storage_size }} @ {{ db2_meta_storage_accessmode }}"
      - "Data ................................... {{ db2_data_storage_class }} - {{ db2_data_storage_size }} @ {{ db2_data_storage_accessmode }}"
      - "Backup ................................. {{ db2_backup_storage_class }} - {{ db2_backup_storage_size }} @ {{ db2_backup_storage_accessmode }}"
      - "Logs ................................... {{ db2_logs_storage_class }} - {{ db2_logs_storage_size }} @ {{ db2_logs_storage_accessmode }}"
      - "Temp ................................... {{ db2_temp_storage_class }} - {{ db2_temp_storage_size }} @ {{ db2_temp_storage_accessmode }}"

# Lookup db2 operator group
- name: "Check if operator group is present in {{ db2_namespace }} namespace already"
  kubernetes.core.k8s_info:
    namespace: "{{ db2_namespace }}"
    kind: OperatorGroup
  register: db2_og_info

# Look up the default channel for the db2u-operator package manifest
- name: Lookup db2u-operator packagemanifest
  kubernetes.core.k8s_info:
    api_version: packages.operators.coreos.com/v1
    kind: PackageManifest
    name: db2u-operator
    namespace: "{{ ibm_common_services_namespace }}"
  register: db2u_manifest_info
  until: db2u_manifest_info.resources[0].status.defaultChannel is defined
  retries: 60 # Approximately 30 minutes before we give up
  delay: 30 # seconds
  when: db2_channel is not defined or db2_channel == "" or db2_version is not defined or db2_version == ""

- name: Set db2u-operator channel
  ansible.builtin.set_fact:
    db2_channel: "{{ db2u_manifest_info.resources[0].status.defaultChannel }}"
  when: db2_channel is not defined or db2_channel == ""

# 5. Fail if required parameters are not set
# -----------------------------------------------------------------------------
- name: "Verify db2_channel is set"
  assert:
    that:
      - db2_channel is defined and db2_channel != ""
    fail_msg: "Unable to determine db2_channel from catalog"

- name: Debug DB2 upgrade channel
  ansible.builtin.debug:
    msg:
      - "Db2 Channel ............................ {{ db2_channel }}"

# 6. Install a Db2u Operator
# -----------------------------------------------------------------------------
- name: "Create db2u Namespace"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/db2u_namespace.yaml') }}"
  register: _db2_namespace_result

- name: Set 'ibm-registry' secret content
  no_log: true
  vars:
    entitledAuthStr: "{{ registry_user }}:{{ ibm_entitlement_key }}"
    entitledAuth: "{{ entitledAuthStr | b64encode }}"
    content:
      - '{"auths":{"{{ registry }}/cp/cpd":{"username":"{{ registry_user }}","password":"{{ ibm_entitlement_key }}","email":"{{ registry_user }}","auth":"{{ entitledAuth }}"}'
      - "}"
      - "}"
  set_fact:
    new_secret: "{{ content | join('') }}"

- name: "Generate 'ibm-registry' secret"
  no_log: true
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/dockerconfigjson
      metadata:
        name: ibm-registry
        namespace: "{{ db2_namespace }}"
      data:
        .dockerconfigjson: "{{ new_secret | to_json | b64encode }}"
  register: secretUpdateResult

- name: "Delete old db2 subscription, operand request and csv from {{ ibm_common_services_namespace }}"
  include_tasks: "tasks/delete_db2_operand_request.yml"

- name: "Create Db2 Universal Operator Subscription in {{ db2_namespace }} namespace"
  ibm.mas_devops.apply_subscription:
    namespace: "{{ db2_namespace }}"
    package_name: db2u-operator
    package_channel: "{{ db2_channel }}"
  register: subscription

# 7. Get the cluster subdomain to be used for the certificate and route creation
# -----------------------------------------------------------------------------
- name: "Get cluster subdomain"
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: _cluster_subdomain

# 8. Create self-signed certificate for Db2u SSL
# -----------------------------------------------------------------------------
- name: "Create internal CA certificate issuer"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/certs/ca_issuer.yml.j2') }}"
  register: createCaIssuer

- name: "Create and wait for CA certificate"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/certs/ca_certificate.yml.j2') }}"
    wait: yes
    wait_timeout: 600 #10 minutes
    wait_condition:
      type: Ready
      status: True
  register: createCaCert

- name: "Create certificate issuer"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/certs/issuer.yml.j2') }}"
  register: createIssuer

- name: "Create db2u certificate"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/certs/certificate.yml.j2') }}"
  register: createCertificate

# 9. Wait until the Db2uCluster CRD is available
# -----------------------------------------------------------------------------
- name: "Wait until the Db2uCluster CRD is available"
  include_tasks: "{{ role_path }}/../../common_tasks/wait_for_crd.yml"
  vars:
    crd_name: "db2uclusters.db2u.databases.ibm.com"

# 10. Get information from the db2u-release ConfigMap
# -----------------------------------------------------------------------------
# if db2_version is not set, then we define it based on the latest version supported by the db2u-license-keys secret
# Starting with s11.5.8.0-cn3, the 's' prefix is removed in db2u-license-keys, we are recommeded to use db2u-release configmap.
- block:
    - name: "Wait until the db2u-release configmap is available"
      no_log: true
      kubernetes.core.k8s_info:
        api_version: v1
        name: db2u-release
        namespace: "{{ db2_namespace }}"
        kind: ConfigMap
      register: db2_release_info
      retries: 20 # ~approx 10 minutes before we give up waiting for the CRD to be created
      delay: 30 # seconds
      until:
        - db2_release_info.resources is defined
        - db2_release_info.resources | length > 0
        - db2_release_info.resources[0].data is defined
        - db2_release_info.resources[0].data | length > 0

    - name: Set db2u-release configmap content
      no_log: true
      set_fact:
        db2_releases_content: "{{ db2_release_info.resources[0].data.json }}"

    - name: Set db2 version
      ansible.builtin.set_fact:
        db2_version: "{{ db2_releases_content.databases.db2u | last }}"

  when: db2_version is not defined or db2_version == ""

# 11. Fail if required parameters are not set
# -----------------------------------------------------------------------------
- name: "Verify db2_channel and db2_version set"
  assert:
    that:
      - db2_channel is defined and db2_channel != ""
      - db2_version is defined and db2_version != ""
    fail_msg: "Unable to determine db2_channel and/or db2_version"

- name: Debug DB2 upgrade channel and version
  ansible.builtin.debug:
    msg:
      - "Db2 Channel ............................ {{ db2_channel }}"
      - "Db2 Version ............................ {{ db2_version }}"

# 12. Lookup db2 instance to see if it exists already
# -----------------------------------------------------------------------------
- name: "See if db2u instance already exists"
  kubernetes.core.k8s_info:
    api_version: db2u.databases.ibm.com/v1
    name: "{{ db2_instance_name | lower }}"
    namespace: "{{db2_namespace}}"
    kind: Db2uCluster
  register: initial_db2_cluster_lookup

# 13. Create a Db2 instance
# -----------------------------------------------------------------------------
- name: "Create db2 instance"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/db2ucluster.yml.j2') }}"

- name: "Set db2 instance timezone"
  include_tasks: "tasks/install/setup_timezone.yml"
  when:
    - db2_timezone is defined
    - db2_timezone != ""

# 14. Wait for the cluster to be ready
# -----------------------------------------------------------------------------
- name: "Wait for db2u instance to be ready (5m delay)"
  kubernetes.core.k8s_info:
    api_version: db2u.databases.ibm.com/v1
    name: "{{ db2_instance_name | lower }}"
    namespace: "{{db2_namespace}}"
    kind: Db2uCluster
  register: db2_cluster_lookup
  until:
    - db2_cluster_lookup.resources is defined
    - db2_cluster_lookup.resources | length == 1
    - db2_cluster_lookup.resources[0].status is defined
    - db2_cluster_lookup.resources[0].status.state is defined
    - db2_cluster_lookup.resources[0].status.state == "Ready"
  retries: 24 # Approximately 2 hours before we give up
  delay: 300 # 5 minutes

# 15. Configure a public route for Db2
# -----------------------------------------------------------------------------
- name: Lookup db2u Engn Service
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    name: "c-{{db2_instance_name | lower}}-db2u-engn-svc"
    namespace: "{{db2_namespace}}"
  register: _db2_instance_engn_svc
  until:
    - _db2_instance_engn_svc.resources[0] is defined
  retries: 15 # approx 5 minutes before we give up
  delay: 20 # seconds

- name: Lookup db2u TLS certificates
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "db2u-certificate-{{db2_instance_name}}"
    namespace: "{{db2_namespace}}"
  register: _db2_instance_certificates

- name: Set Db2u certificates as Facts
  set_fact:
    db2_ca_pem: "{{ _db2_instance_certificates.resources[0].data['ca.crt'] | b64decode }}"
    db2_tls_crt: "{{ _db2_instance_certificates.resources[0].data['tls.crt'] | b64decode }}"
    db2_tls_key: "{{ _db2_instance_certificates.resources[0].data['tls.key'] | b64decode }}"
  when:
    - _db2_instance_certificates is defined
    - (_db2_instance_certificates.resources | length > 0)

- name: Set Db2u TLS port
  set_fact:
    db2_tls_serviceport: "{{item.targetPort}}"
  when: "item.name == 'ssl-server'"
  loop: "{{_db2_instance_engn_svc.resources[0].spec.ports}}"

- name: "Create dedicated route: db2u-{{ db2_instance_name }}-tls-route"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tlsroute.yml.j2') }}"

- name: Lookup existing db2u-tls-route
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Route
    name: "db2u-tls-route"
    namespace: "{{db2_namespace}}"
  register: _db2_tls_route

# delete existing db2u-tls-route if that exists and matches with the same host/location from route created by previous step.
# that way we ensure that clean up should only happen if there's a conflicting route present.
- name: Clean up db2u-tls-route if needed
  vars:
    expected_host: "{{db2_instance_name | lower }}-{{db2_namespace}}.{{_cluster_subdomain.resources[0].spec.domain}}"
  when:
    - _db2_tls_route.resources | length > 0
    - _db2_tls_route.resources[0].spec.host == expected_host
  kubernetes.core.k8s:
    api_version: v1
    kind: Route
    name: "db2u-tls-route"
    namespace: "{{db2_namespace}}"
    state: absent

# 16. Delete db2 pod on intial setup only, to workaround db2 issue
# that was causing TLS connection issues when the pod was first started
# -----------------------------------------------------------------------------
- name: Delete db2u pod on initial setup
  kubernetes.core.k8s:
    api_version: v1
    kind: Pod
    name: "c-{{db2_instance_name | lower}}-db2u-0"
    namespace: "{{db2_namespace}}"
    state: absent
  when: initial_db2_cluster_lookup.resources | length == 0

# 17. create an LDAP user if db2_ldap_username specified
# -----------------------------------------------------------------------------
- name: Create LDAP user if username and password is provided
  include_tasks: tasks/install/create_ldap_user.yml
  when:
    - db2_ldap_username is defined
    - db2_ldap_username != ""
    - db2_ldap_password is defined
    - db2_ldap_password != ""
    - db2_rotate_password == false

- debug:
    msg:
      - "{{db2_ldap_username}}"
      - "{{db2_rotate_password}}"

# 18. Rotate db2 ldap password
# -----------------------------------------------------------------------------
- name: Rotate Db2 LDAP password if db2_rotate_password is True and username is provided
  include_tasks: tasks/install/rotate_ldap_user_password.yml
  when:
    - db2_ldap_username is defined
    - db2_ldap_username != ""
    - db2_rotate_password == true

# 19. Wait for the statefulset to be ready
# -----------------------------------------------------------------------------
- name: "Wait for Db2 Stateful set to be ready"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: StatefulSet
    name: "c-{{ db2_instance_name | lower }}-db2u"
    namespace: "{{ db2_namespace }}"
  register: db2_sts
  until:
    - db2_sts.resources is defined
    - db2_sts.resources | length > 0
    - db2_sts.resources[0].status is defined
    - db2_sts.resources[0].status.replicas is defined
    - db2_sts.resources[0].status.readyReplicas is defined
    - db2_sts.resources[0].status.readyReplicas == db2_sts.resources[0].status.replicas
  retries: 20 # approx 10 minutes before we give up
  delay: 30 # seconds

# 20. Generate a JdbcCfg for MAS configuration
# -----------------------------------------------------------------------------
- include_tasks: tasks/install/suite_jdbccfg.yml
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""
