---
# 1. Look up the default channel for the db2u-operator package manifest
# -----------------------------------------------------------------------------
- block:
    - name: Lookup db2u-operator packagemanifest
      kubernetes.core.k8s_info:
        api_version: packages.operators.coreos.com/v1
        kind: PackageManifest
        name: db2u-operator
        namespace: "{{ ibm_common_services_namespace }}"
      register: db2u_manifest_info

    - name: Set db2u-operator update channel to latest default channel if not provided
      set_fact:
        db2_channel: "{{ db2u_manifest_info.resources[0].status.defaultChannel }}"
  when: db2_channel is not defined or db2_channel == ""

# Fail if db2_channel and/or version not discovered
# -----------------------------------------------------------------------------
- name: "Verify db2_channel set"
  assert:
    that:
      - db2_channel is defined and db2_channel != ""
    fail_msg: "Unable to determine db2_channel from catalog"

- name: Debug Db2 Universal Operator Install
  ansible.builtin.debug:
    msg:
      - "Db2 Channel ............................ {{ db2_channel }}"

# 2. Lookup current db2u channel
# -----------------------------------------------------------------------------
# This step was added to check in which namespace db2 sub/operator is running
# since now it might be running in namespaces other than in ibm-common-services namespace
- name: Find out which namespace db2 operator is running
  shell: oc get subs -A | grep db2u-operator | awk '{print $1}'
  register: db2_operator_namespace_lookup

- name: Assert db2 operator is installed
  assert:
    that: db2_operator_namespace_lookup.stdout_lines | length > 0
    fail_msg: "DB2 operator was not found in the cluster. Aborting DB2 upgrade."

- name: Assert there is just one db2 operator running
  assert:
    that: db2_operator_namespace_lookup.stdout_lines | length == 1
    fail_msg:
      - "There are multiple subscriptions for DB2 in the cluster."
      - "Make sure you just have one DB2 operator running."
      - "DB2 operator namespaces identified: {{ db2_operator_namespace_lookup.stdout_lines }}"

- name: Define db2_operator_namespace based on the lookup
  set_fact:
    current_db2_operator_namespace: "{{ db2_operator_namespace_lookup.stdout }}"

- debug:
    msg: "DB2 subscription/operator is currently running in '{{ current_db2_operator_namespace }}' namespace"

- name: "Get the current subscription channel for db2 in {{ current_db2_operator_namespace }} namespace"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    namespace: "{{ current_db2_operator_namespace }}"
    kind: Subscription
    label_selectors:
      - operators.coreos.com/db2u-operator.{{ current_db2_operator_namespace }}
  register: db2_sub_info

- name: "Set the value for the current channel for db2"
  set_fact:
    old_db2_channel: "{{ db2_sub_info.resources[0].spec.channel }}"
    old_db2_csv: "{{ db2_sub_info.resources[0].status.currentCSV }}"

- debug:
    msg:

- name: Debug DB2 upgrade subscription status
  ansible.builtin.debug:
    msg:
      - "Current Db2 Subscription namespace ............... {{ current_db2_operator_namespace }}"
      - "Current Db2 Channel .............................. {{ old_db2_channel }}"
      - "Current Db2 csv .................................. {{ old_db2_csv }}"
      - "Target Db2 Subscription namespace ................ {{ db2_namespace }}"
      - "Target Db2 Channel ............................... {{ db2_channel }}"

# 3. If the current operator channel is the same for the upgrade, no subscription upgrade
# -----------------------------------------------------------------------------
- name: "Debug when no upgrade is needed"
  when: db2_channel == old_db2_channel
  debug:
    msg: "No action is required. Db2 subscription is already on the {{ db2_channel }} channel"

# Run the DB2 subscription upgrade if there's a new db2 channel to be upgraded
# or if DB2 subscription/operator is currently running in different namespaces from the DB2 instances
# in that case, the task will perform the DB2 subscription migration to the db2_namespace
- include_tasks: "tasks/upgrade/run-db2-subscription-upgrade.yml"
  when: db2_channel != old_db2_channel or current_db2_operator_namespace != db2_namespace

# 4. Run Db2 instance upgrade
# -----------------------------------------------------------------------------
- include_tasks: "tasks/upgrade/run-db2-instances-upgrade.yml"
