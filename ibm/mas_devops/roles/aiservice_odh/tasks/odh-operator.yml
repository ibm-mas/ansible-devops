---
# - name: "install : Create OpenDataHub Subscription"
#   ibm.mas_devops.apply_subscription:
#     namespace: openshift-operators
#     package_name: opendatahub-operator
#     package_channel: "{{ odh_channel }}"
#   register: odh_subscription

- name: "Install Openshift odh Operator specific version"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/odh/subscription.yml.j2') }}"

- name: Await availability of ODH Install Plans
  pause:
    minutes: 2
    prompt: "Waiting for ODH install plan"

- name: Gather facts about Install Plans
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    namespace: "{{ openshift_namespace }}"
  register: install_plan_facts
  retries: 20
  delay: 30
  until: install_plan_facts.resources | length >= 3

- name: Extract Install Plans with specific clusterServiceVersionNames
  set_fact:
    relevant_install_plans: "{{ relevant_install_plans | default([]) + [item.metadata.name] }}"
  loop: "{{ install_plan_facts.resources }}"
  when: odh_operator_version in item.spec.clusterServiceVersionNames
  no_log: true

- name: Display relevant Install Plans
  debug:
    msg: "Install Plans with '{{ odh_operator_version }}' clusterServiceVersionNames: {{ relevant_install_plans }}"

- name: Approve install plan for Opendatahub operator
  block:
    - name: Approve install plan to approve
      shell: oc patch installplan {{ relevant_install_plans | first }} -n openshift-operators --type merge --patch '{"spec":{"approved":true}}'

- name: "Wait for Opendata Hub instance to be ready in {{ openshift_namespace }}"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    name: "{{ odh_operator_version }}"
    namespace: "{{ openshift_namespace }}"
    kind: ClusterServiceVersion
  register: odh_operators_output
  until:
    - odh_operators_output.resources is defined
    - odh_operators_output.resources | length > 0
    - odh_operators_output.resources[0].status.phase is defined
    - odh_operators_output.resources[0].status.phase == "Succeeded"
  retries: 60 # approx 30 minutes before we give up
  delay: 30 # seconds
