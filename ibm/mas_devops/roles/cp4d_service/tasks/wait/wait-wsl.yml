---
# 1. Wait for CCS
# -----------------------------------------------------------------------------
- name: "Wait for CCS"
  include_tasks: "wait-ccs.yml"

# 3. Wait until the NotebookRuntime CRD is available and apply Python 3.9 runtime CR - needed for CPD 4.6
# -----------------------------------------------------------------------------
- name: "wait-wsl : Wait until the notebookruntimes.ws.cpd.ibm.com CRD is available"
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    name: notebookruntimes.ws.cpd.ibm.com
    kind: CustomResourceDefinition
    wait: yes
    wait_sleep: 10
    wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
    wait_condition:
      type: NamesAccepted
      status: "True"
  register: wsr_crd_info
  retries: 120 # ~approx 5 minutes before we give up waiting for the CRD to be created
  delay: 5 # seconds
  until:
    - wsr_crd_info.resources is defined
    - wsr_crd_info.resources | length > 0

- name: "wait-wsl : Apply NotebookRuntime Python 3.9"
  when: not cpd_50_or_higher
  kubernetes.core.k8s:
    apply: yes
    template: "templates/wsl/runtimes-py39.yml.j2"

# 4. Wait for WSL service CR to be ready
# -----------------------------------------------------------------------------
# We can't stop waiting on Failed status, as it will report failed multiple
# times during initial reconcile ... we just need to keep waiting.
- name: "wait-wsl : Wait for wsStatus 'Completed' (5m interval)"
  kubernetes.core.k8s_info:
    api_version: "{{ cpd_service_info[cpd_service_name].api_version }}"
    kind: "{{ cpd_service_info[cpd_service_name].crd_kind }}"
    name: "{{ cpd_service_info[cpd_service_name].cr_name }}"
    namespace: "{{ cpd_instance_namespace }}"
  register: cpd_cr_lookup
  until:
    - cpd_cr_lookup.resources is defined
    - cpd_cr_lookup.resources | length == 1
    - cpd_cr_lookup.resources[0].status is defined
    - cpd_cr_lookup.resources[0].status.wsStatus is defined
    - cpd_cr_lookup.resources[0].status.wsStatus == "Completed" # or cpd_cr_lookup.resources[0].status.wsStatus == "Failed"
  retries: 30 # Up to 2.5 hours
  delay: 300 # Every 5 minutes

- name: "wait-wsl : Check that the WSL wsStatus is 'Completed'"
  assert:
    that: cpd_cr_lookup.resources[0].status.wsStatus == "Completed"
    fail_msg: "Watson Studio install failed (wsStatus)"
# At this stage the following will be added to the CP4D installation:
#
# These operators will be installed in ibm-cpd-operators namespace:
# - IBM Data Refinery
# - Watson Studio
# - Common Core Services
#
# These CRs will be created in the ibm-cpd namespace:
# - ccs.ccs.cpd.ibm.com/ccs-cr
# - ws.ws.cpd.ibm.com/ibmcpd-wsl
# - datarefinery.datarefinery.cpd.ibm.com/datarefinery-sample
# - notebookruntime.ws.cpd.ibm.com/ibm-cpd-ws-runtime-py39
#
# oc -n ibm-cpd get ccs,WS,DataRefinery,notebookruntimes
# NAME                         VERSION   RECONCILED   STATUS      AGE
# ccs.ccs.cpd.ibm.com/ccs-cr             4.0.8        Completed   158m
#
# NAME                           VERSION   RECONCILED   STATUS       AGE
# ws.ws.cpd.ibm.com/ibmcpd-wsl   4.0.7                  InProgress   161m
#
# NAME                                                        VERSION   STATUS      AGE
# datarefinery.datarefinery.cpd.ibm.com/datarefinery-sample   4.0.8     Completed   65m
#
# NAME                                                     VERSION   RECONCILED   STATUS      AGE
# notebookruntime.ws.cpd.ibm.com/ibm-cpd-ws-runtime-py39             4.0.8        Completed   53m
#
