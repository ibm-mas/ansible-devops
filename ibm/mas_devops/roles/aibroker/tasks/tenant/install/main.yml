---
- name: "Check if tenant namespace: {{ tenantNamespace }} exists"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Namespace
    name: "{{ tenantNamespace }}"
  register: namespace_info

# Create tenant namespace
- name: "Create a tenant namespace: {{ tenantNamespace }}"
  kubernetes.core.k8s:
    name: "{{ tenantNamespace }}"
    api_version: v1
    kind: Namespace
  when:
    - namespace_info.resources | length == 0

# Copy secrets to tenant namespace
- name: "Copy secrets to namespace: {{ tenantNamespace }}"
  shell: 'oc get secret {{ item }} -n mas-{{ mas_instance_id }}-aibroker -o yaml | sed "s/namespace: .*/namespace: {{ tenantNamespace }}/" | oc apply --force -f -'
  with_items:
    - km-s3-secret
    - "{{ pullSecretName }}"

# Adding inference server runtimes
- name: "Create config map for connector config"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/connector-configmap.yml.j2') }}"

- name: "Create SA for server runtimes"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/km-s3-sa.yml.j2') }}"

- name: "Create huggingfaceserver server runtime"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/kserve-huggingfaceserver.yml.j2') }}"

- name: "Create lgbserver server runtime"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/kserve-lgbserver.yml.j2') }}"

- name: "Create sklearnserver server runtime"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/kserve-sklearnserver.yml.j2') }}"

- name: "Create xgbserver server runtime"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/kserve-xgbserver.yml.j2') }}"

# Applay RBAC roles
- name: "Apply RBAC for tenant"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/rbac.yml.j2') }}"

- name: "Check if SLS key secret exists in namespace: {{ aibroker_namespace }}"
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ tenantNamespace }}----sls-secret"
    namespace: "{{ aibroker_namespace }}"
  register: sls_secret_info

- name: Create SLS secret
  script: "{{ role_path }}/files/create_sls_secret.sh {{ tenantNamespace }} {{ mas_instance_id }} {{ mas_aibroker_sls_url }} {{ mas_aibroker_sls_registration_key }} {{ mas_aibroker_path_ca_crt }}"
  when:
    - sls_secret_info.resources | length == 0
  register: sls_secret_output

- name: Debug Create sls secret for AI Broker
  debug:
    msg: "{{ sls_secret_output }}"

- name: Delete DRO secret
  command: oc delete secret "{{ tenantNamespace }}----dro-secret" -n {{ aibroker_namespace }}
  register: delete_result
  ignore_errors: yes
  failed_when: delete_result.rc != 0 and "NotFound" not in delete_result.stderr

- name: Create DRO token
  script: "{{ role_path }}/files/create_dro_token.sh {{ tenantNamespace }} {{ mas_instance_id }} {{ mas_aibroker_dro_token }}"
  register: dro_token_output

- name: Debug Create DRO token
  debug:
    msg: "{{ dro_token_output }}"

- name: "Wait for {{ pod_keywords }} pod to be reconsiled (10s delay)"
  shell: >
    oc get pods -n {{ aibroker_namespace }} --no-headers=true | grep "{{ pod_keywords }}" | awk '{print $1}'
    | xargs oc logs -c {{ pod_keywords }} -n {{ aibroker_namespace }} | grep "ok=" | wc -l
  register: _is_reconsiled
  until: _is_reconsiled.stdout|int == 1
  retries: 60
  delay: 10

- name: Wait for service /service/rest/api/v1/tenant #need more accurate way to check if service working
  pause:
    minutes: 6
    prompt: "Waiting for for service /service/rest/api/v1/tenant"

- name: Create tenant {{ tenantNamespace }} and add to db2 for saas - using uri
  uri:
    url: "https://aibroker.{{ mas_instance_id }}.{{ mas_aibroker_domain }}/ibm/aibroker/service/rest/api/v1/tenant"
    validate_certs: no
    method: POST
    headers:
      apikey: "{{ provision_tenant_api_key }}"
      accept: "*/*"
      Content-Type: "application/json"
      tenantid: "{{ mas_aibroker_provision_tenant }}"
    body_format: "json"
    body: "{\"tenant_name\": \"{{ tenantNamespace }}\", \"sls_url\": \"{{ mas_aibroker_sls_url }}\", \"dro_url\": \"{{ mas_aibroker_dro_url }}\"}"
    status_code: [201]
    timeout: 30
  register: add_tenant_to_db2

- name: Debug tenant #TODO: remove on final commit
  debug:
    msg: "{{ add_tenant_to_db2 }}"

- name: Create tenant {{ tenantNamespace }} and add to db2 for saas - using uri
  uri:
    url: "https://aibroker.{{ mas_instance_id }}.{{ mas_aibroker_domain }}/ibm/aibroker/service/rest/api/v1/tenantEntitlements"
    validate_certs: no
    method: POST
    headers:
      apikey: "{{ provision_tenant_api_key }}"
      accept: "*/*"
      Content-Type: "application/json"
      tenantid: "{{ mas_aibroker_provision_tenant }}"
    body_format: "json"
    body: "{\"tenant_name\": \"{{ tenantNamespace }}\", \"entitlement_type\": \"standard\", \"model_type\": \"similarity\", \"entitlement_start_date\": \"2025-01-01\", \"entitlement_end_date\": \"2026-01-01\"}"
    status_code: [201]
    timeout: 30
  register: add_tenant_entitlements_to_db2

- name: Debug tenant entitlement #TODO: remove on final commit
  debug:
    msg: "{{ add_tenant_entitlements_to_db2 }}"

- name: Create tenant {{ tenantNamespace }} and add to db2 for pcc - using uri
  uri:
    url: "https://aibroker.{{ mas_instance_id }}.{{ mas_aibroker_domain }}/ibm/aibroker/service/rest/api/v1/tenantEntitlements"
    validate_certs: no
    method: POST
    headers:
      apikey: "{{ provision_tenant_api_key }}"
      accept: "*/*"
      Content-Type: "application/json"
      tenantid: "{{ mas_aibroker_provision_tenant }}"
    body_format: "json"
    body: "{\"tenant_name\": \"{{ tenantNamespace }}\", \"entitlement_type\": \"standard\", \"model_type\": \"pcc\", \"entitlement_start_date\": \"2025-01-01\", \"entitlement_end_date\": \"2026-01-01\"}"
    status_code: [201]
    timeout: 30
  register: add_tenant_entitlements_to_db2_pcc

- name: Debug tenant entitlement #TODO: remove on final commit
  debug:
    msg: "{{ add_tenant_entitlements_to_db2_pcc }}"

- name: Create tenant {{ tenantNamespace }} and add to db2 for mcc - using uri
  uri:
    url: "https://aibroker.{{ mas_instance_id }}.{{ mas_aibroker_domain }}/ibm/aibroker/service/rest/api/v1/tenantEntitlements"
    validate_certs: no
    method: POST
    headers:
      apikey: "{{ provision_tenant_api_key }}"
      accept: "*/*"
      Content-Type: "application/json"
      tenantid: "{{ mas_aibroker_provision_tenant }}"
    body_format: "json"
    body: "{\"tenant_name\": \"{{ tenantNamespace }}\", \"entitlement_type\": \"standard\", \"model_type\": \"mcc\", \"entitlement_start_date\": \"2025-01-01\", \"entitlement_end_date\": \"2026-01-01\"}"
    status_code: [201]
    timeout: 30
  register: add_tenant_entitlements_to_db2_mcc

- name: Debug tenant entitlement #TODO: remove on final commit
  debug:
    msg: "{{ add_tenant_entitlements_to_db2_mcc }}"
