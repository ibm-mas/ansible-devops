---
- name: 'Check if tenant namespace: {{ tenantNamespace }} exists'
  k8s_info:
    api_version: v1
    kind: Namespace
    name: '{{ tenantNamespace }}'
  register: namespace_info

# Create tenant namespace
- name: 'Create a tenant namespace: {{ tenantNamespace }}'
  kubernetes.core.k8s:
    name: '{{ tenantNamespace }}'
    api_version: v1
    kind: Namespace
  when:
    - namespace_info.resources | length == 0

# Copy secrets to tenant namespace
- name: 'Copy secrets to namespace: {{ tenantNamespace }}'
  shell: 'oc get secret {{ item }} -n mas-{{ mas_instance_id }}-aibroker -o yaml | sed "s/namespace: .*/namespace: {{ tenantNamespace }}/" | oc apply --force -f -'
  with_items:
    - km-s3-secret
    - '{{ pullSecretName }}'

# Adding inference server runtimes
- name: 'Create config map for connector config'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/connector-configmap.yml.j2') }}"

- name: 'Create SA for server runtimes'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/km-s3-sa.yml.j2') }}"

- name: 'Create huggingfaceserver server runtime'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/kserve-huggingfaceserver.yml.j2') }}"

- name: 'Create lgbserver server runtime'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/kserve-lgbserver.yml.j2') }}"

- name: 'Create sklearnserver server runtime'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/kserve-sklearnserver.yml.j2') }}"

- name: 'Create xgbserver server runtime'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/kserve-xgbserver.yml.j2') }}"

# Applay RBAC roles
- name: 'Apply RBAC for tenant'
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tenant/rbac.yml.j2') }}"

# - name: "debug domain"
#   debug:
#     msg: "Domain name ......... {{ domain }}"

# - name: "Remove prefix from domain"
#   set_fact:
#     hostname: "{{ domain | regex_replace('^[^.]+\\.', '') }}"

- name: Apply Kmodel api
  shell: |
    curl -k -X POST "https://controller-mas-{{ mas_instance_id }}-aibroker.{{ mas_aibroker_domain }}/api/v1/tenant?id={{ tenantNamespace }}" \
    --header 'accept: */*' \
    --header 'Content-Type: application/json' \
    --data '{"name": "string","public": true,"max_models": 10}'

# - name: Create sls secret sample for AI Broker
#   command: python3 {{ role_path }}/files/alm_sample_sls_use.py {{ mas_aibroker_sls_url }} {{ mas_aibroker_sls_registration_key }}
#   register: create_sls_secret_output
#   ignore_errors: yes

# - name: Debug Create sls secret for AI Broker
#   debug:
#     msg: "{{ create_sls_secret_output }}"

- name: "Check if SLS key secret exists in namespace: {{ aibroker_namespace }}"
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ tenantNamespace }}----sls-secret"
    namespace: "{{ aibroker_namespace }}"
  register: sls_secret_info

- name: Create SLS secret
  script: "{{ role_path }}/files/create_sls_secret.sh {{ tenantNamespace }} {{ mas_instance_id }} {{ mas_aibroker_sls_url }} {{ mas_aibroker_sls_registration_key }}"
  when:
    - sls_secret_info.resources | length == 0
  register: sls_secret_output

- name: Debug Create sls secret for AI Broker
  debug:
    msg: "{{ sls_secret_output }}"

- name: Delete DRO secret
  command: oc delete secret "{{ tenantNamespace }}----dro-secret" -n {{ aibroker_namespace }}
  register: delete_result
  ignore_errors: yes
  failed_when: delete_result.rc != 0 and "NotFound" not in delete_result.stderr

- name: Create DRO token
  script: "{{ role_path }}/files/create_dro_token.sh {{ tenantNamespace }} {{ mas_instance_id }} {{ mas_aibroker_dro_token }}"
  register: dro_token_output

- name: Debug Create DRO token
  debug:
    msg: "{{ dro_token_output }}"

# - name: Create tenant entitlement
#   command: python3 {{ role_path }}/files/create_tenant_entitlement.py {{ tenantNamespace }} standard pcc 2024-01-01 2027-01-01
#   register: create_tenant_entitlement
#   ignore_errors: yes

# - name: Debug Create tenant entitlement
#   debug:
#     msg: "{{ create_tenant_entitlement }}"
