---
# 1. Lookup for router-certs-default secret
# -----------------------------------------------------------------------------
- name: set ocp ingress tls secret
  set_fact:
    ocp_ingress_tls_secret_name: "{{ lookup('env', 'OCP_INGRESS_TLS_SECRET_NAME') | default('router-certs-default', True) }}"
  when: ocp_ingress_tls_secret_name is not defined

- name: "1st attempt : Lookup for {{ ocp_ingress_tls_secret_name }} secret"
  no_log: true
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ ocp_ingress_tls_secret_name }}"
    namespace: openshift-ingress
  register: router_certs_default_secret

- name: "Record that we have found the {{ ocp_ingress_tls_secret_name }} cert secret"
  when:
    - router_certs_default_secret is defined
    - router_certs_default_secret.resources | length > 0
  set_fact:
    found_router_default_secret: true
    cluster_ingress_secret_name: "{{ ocp_ingress_tls_secret_name }}"
    cluster_ingress_tls_crt: "{{ router_certs_default_secret.resources[0].data['tls.crt'] | b64decode }}"

- debug:
    msg:
      - "Cluster Ingress Cert Secret Name ...... {{ cluster_ingress_secret_name | default('1st attempt missed', true) }}"

# 2. Lookup for secret named after cluster ingress
# -----------------------------------------------------------------------------
- when:
    - cluster_ingress_secret_name is not defined or
      cluster_ingress_tls_crt is not defined
  block:
    - name: Get cluster subdomain
      when: found_router_default_secret is not defined
      kubernetes.core.k8s_info:
        api_version: config.openshift.io/v1
        kind: Ingress
        name: cluster
      register: cluster_subdomain

    - name: "2nd attempt : Lookup for cluster ingress secret based on Ingress cluster"
      when:
        - cluster_subdomain.resources is defined
        - cluster_subdomain.resources | length > 0
      no_log: true
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ cluster_subdomain.resources[0].spec.domain | regex_search('[^.]*') }}"
        namespace: openshift-ingress
      register: cluster_ingress_secret

    - name: "Record that we have found the cluster ingress cert secret"
      when:
        - cluster_ingress_secret is defined
        - cluster_ingress_secret.resources | length > 0
      set_fact:
        found_cluster_ingress_secret: true
        cluster_ingress_secret_name: "{{ cluster_subdomain.resources[0].spec.domain | regex_search('[^.]*')  }}"
        cluster_ingress_tls_crt: "{{ cluster_ingress_secret.resources[0].data['tls.crt'] | b64decode }}"

    - debug:
        msg:
          - "Cluster Ingress Cert Secret Name ...... {{ cluster_ingress_secret_name | default('2nd attempt missed', true) }}"

# 3. If still not found, lookup for cluster ingress secret based on ingresscontroller
# -----------------------------------------------------------------------------
- when:
    - cluster_ingress_secret_name is not defined or
      cluster_ingress_tls_crt is not defined
  block:
    - name: "3rd attempt : Lookup for cluster ingress secret based on IngressController default"
      kubernetes.core.k8s_info:
        api_version: operator.openshift.io/v1
        kind: IngressController
        name: default
        namespace: openshift-ingress-operator
      register: cluster_ingresscontroller_lookup

    - when:
        - cluster_ingresscontroller_lookup.resources is defined and cluster_ingresscontroller_lookup.resources | length > 0
        - cluster_ingresscontroller_lookup.resources[0].spec.defaultCertificate.name
      block:
        - name: Set default secret name containing cluster's ingress certificate based on IngressController default
          set_fact:
            cluster_ingress_secret_name: "{{ cluster_ingresscontroller_lookup.resources[0].spec.defaultCertificate.name }}"

        - name: Lookup default secret name containing cluster's ingress certificate based on IngressController default
          when: cluster_ingress_secret_name is defined and cluster_ingress_secret_name | length > 0
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Secret
            name: "{{ cluster_ingress_secret_name }}"
            namespace: openshift-ingress
          register: cluster_ingress_default_secret

        - name: "Record that we have found the default cluster ingress cert secret"
          when:
            - cluster_ingress_default_secret.resources is defined
            - cluster_ingress_default_secret.resources | length > 0
          set_fact:
            found_cluster_ingress_secret: true
            cluster_ingress_tls_crt: "{{ cluster_ingress_default_secret.resources[0].data['tls.crt'] | b64decode }}"

    - debug:
        msg:
          - "Cluster Ingress Cert Secret Name ...... {{ cluster_ingress_secret_name | default('3rd attempt missed', true) }}"

# 4. Lookup for secret based on the cluster name
# -----------------------------------------------------------------------------
# ROSA, TechZone, and some IPI Installs use this convention
- when:
    - cluster_ingress_secret_name is not defined or
      cluster_ingress_tls_crt is not defined
  block:
    - name: Get all TLS secrets
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: openshift-ingress
      register: cluster_primary_secrets

    # This will lookup for cluster's ingress secret name that matches a given label
    # Depending on the cluster's provider, it will try to use substrings to find the
    # exact secret's name i.e for ARO clusters, the cluster's ingress secret name
    # will end with '-ingress'
    - name: "4th attempt : Lookup for cluster ingress secret based on ROSA, TechZone, and some IPI Installs name convention"
      when:
        - cluster_primary_secrets is defined
        - cluster_primary_secrets.resources is defined
        - cluster_primary_secrets.resources | length > 0
        - (item.metadata.name.endswith("-primary-cert-bundle-secret")) or
          (item.metadata.name.endswith("-ingress")) or
          (item.metadata.name == "letsencrypt-certs")
      set_fact:
        found_cluster_primary_secret: true
        cluster_ingress_secret_name: "{{ item.metadata.name }}"
        cluster_ingress_tls_crt: "{{ item.data['tls.crt'] | b64decode }}"
      with_items:
        - "{{ cluster_primary_secrets.resources }}"
      loop_control:
        label: "{{ item.metadata.name }}"

    - debug:
        msg:
          - "Cluster Ingress Cert Secret Name ...... {{ cluster_ingress_secret_name | default('4th attempt missed', true) }}"

- name: "Assert one way or another cluster ingress secret has been found"
  assert:
    that:
      - cluster_ingress_secret_name is defined
      - cluster_ingress_tls_crt is defined
    fail_msg: "Cluster ingress secret was not automatically found, please 'export OCP_INGRESS_TLS_SECRET_NAME' to point to the secret name in 'openshift-ingress' namespace that contains cluster ingress TLS certificates."

# Break up the certificate into an array
- name: "Extract certificate chain into a variable"
  set_fact:
    cluster_ingress_tls_crt: "{{ cluster_ingress_tls_crt | regex_findall('(?s)(-----BEGIN .+?-----.+?-----END .+?-----)', multiline=True, ignorecase=True) }}"

# Filter out of date DST Root CA X3 issuer certificate if present
# This is a known problem in IBMCloud ROKS clusters, where an expired
# root certificate is included in the chain, the inclusion of this
# certificate in our truststore prevents MAS being able to connect
# to IBM User Data Services because it's an invalid certificate.
- name: "Check if DST Root CA X3 issuer certificate is present"
  vars:
    dst_root_x3: "Dfvp7OOGAN6dEOM4+qR9sdjoSYKEBpsr6GtPAQw4dy753ec5"
  set_fact:
    cluster_ingress_tls_crt_remove_it: "{{ cluster_ingress_tls_crt_remove_it|default([]) + [item] }}"
  when:
    - (dst_root_x3 in item)
  with_items:
    - "{{ cluster_ingress_tls_crt }}"

- name: "Filter DST Root CA X3 issuer certificate if present"
  set_fact:
    cluster_ingress_tls_crt: "{{ cluster_ingress_tls_crt | difference(cluster_ingress_tls_crt_remove_it) | list }}"
  when:
    - cluster_ingress_tls_crt_remove_it is defined
    - cluster_ingress_tls_crt_remove_it | length > 0
    - cluster_ingress_tls_crt is defined
    - cluster_ingress_tls_crt | length > 0

# 5. Log which (if any) secret was found
# -----------------------------------------------------------------------------
# If at least one of the secrets exist, then all good.  If none of the
# secrets are found, then fail with a message
- name: "Debug cluster certificate secret search"
  debug:
    msg:
      - "Found Router Default Secret ........... {{ found_router_default_secret | default(False, True) }}"
      - "Found Cluster Ingress Secret .......... {{ found_cluster_ingress_secret | default(False, True) }}"
      - "Found Cluster Primary Secret .......... {{ found_cluster_primary_secret | default(False, True) }}"
      - "Cluster Ingress Cert Secret Name ...... {{ cluster_ingress_secret_name | default('missing', True) }}"
      - "Cluster Ingress Cert .................. {{ cluster_ingress_tls_crt | default('missing', True) }}"
